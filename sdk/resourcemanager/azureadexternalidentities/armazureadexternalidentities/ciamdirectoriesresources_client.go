//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CiamDirectoriesResourcesClient contains the methods for the CiamDirectoriesResources group.
// Don't use this type directly, use NewCiamDirectoriesResourcesClient() instead.
type CiamDirectoriesResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCiamDirectoriesResourcesClient creates a new instance of CiamDirectoriesResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCiamDirectoriesResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CiamDirectoriesResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CiamDirectoriesResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates a Ciam Directory resource, which is used to linking a subscription to an instance of Azure
// AD External Identities. Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - resource - Resource create parameters.
//   - options - CiamDirectoriesResourcesClientBeginCreateOrUpdateOptions contains the optional parameters for the CiamDirectoriesResourcesClient.BeginCreateOrUpdate
//     method.
func (client *CiamDirectoriesResourcesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource CiamDirectoryResource, options *CiamDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*runtime.Poller[CiamDirectoriesResourcesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, resourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CiamDirectoriesResourcesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CiamDirectoriesResourcesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates a Ciam Directory resource, which is used to linking a subscription to an instance of Azure AD
// External Identities. Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
func (client *CiamDirectoriesResourcesClient) createOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource CiamDirectoryResource, options *CiamDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "CiamDirectoriesResourcesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, resourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CiamDirectoriesResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resource CiamDirectoryResource, options *CiamDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes a Ciam Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - CiamDirectoriesResourcesClientBeginDeleteOptions contains the optional parameters for the CiamDirectoriesResourcesClient.BeginDelete
//     method.
func (client *CiamDirectoriesResourcesClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *CiamDirectoriesResourcesClientBeginDeleteOptions) (*runtime.Poller[CiamDirectoriesResourcesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CiamDirectoriesResourcesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CiamDirectoriesResourcesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes a Ciam Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
func (client *CiamDirectoriesResourcesClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *CiamDirectoriesResourcesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "CiamDirectoriesResourcesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CiamDirectoriesResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *CiamDirectoriesResourcesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a Ciam Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - CiamDirectoriesResourcesClientGetOptions contains the optional parameters for the CiamDirectoriesResourcesClient.Get
//     method.
func (client *CiamDirectoriesResourcesClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *CiamDirectoriesResourcesClientGetOptions) (CiamDirectoriesResourcesClientGetResponse, error) {
	var err error
	const operationName = "CiamDirectoriesResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return CiamDirectoriesResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CiamDirectoriesResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CiamDirectoriesResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *CiamDirectoriesResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *CiamDirectoriesResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CiamDirectoriesResourcesClient) getHandleResponse(resp *http.Response) (CiamDirectoriesResourcesClientGetResponse, error) {
	result := CiamDirectoriesResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CiamDirectoryResource); err != nil {
		return CiamDirectoriesResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets Ciam Directory resources under a resource group for the Microsoft.AzureActiveDirectory
// resource provider
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CiamDirectoriesResourcesClientListByResourceGroupOptions contains the optional parameters for the CiamDirectoriesResourcesClient.NewListByResourceGroupPager
//     method.
func (client *CiamDirectoriesResourcesClient) NewListByResourceGroupPager(resourceGroupName string, options *CiamDirectoriesResourcesClientListByResourceGroupOptions) *runtime.Pager[CiamDirectoriesResourcesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CiamDirectoriesResourcesClientListByResourceGroupResponse]{
		More: func(page CiamDirectoriesResourcesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CiamDirectoriesResourcesClientListByResourceGroupResponse) (CiamDirectoriesResourcesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CiamDirectoriesResourcesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return CiamDirectoriesResourcesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CiamDirectoriesResourcesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *CiamDirectoriesResourcesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CiamDirectoriesResourcesClient) listByResourceGroupHandleResponse(resp *http.Response) (CiamDirectoriesResourcesClientListByResourceGroupResponse, error) {
	result := CiamDirectoriesResourcesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CiamDirectoryResourceListResult); err != nil {
		return CiamDirectoriesResourcesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets Ciam Directory resources under a subscription for the Microsoft.AzureActiveDirectory
// resource provider
//
// Generated from API version 2024-05-01
//   - options - CiamDirectoriesResourcesClientListBySubscriptionOptions contains the optional parameters for the CiamDirectoriesResourcesClient.NewListBySubscriptionPager
//     method.
func (client *CiamDirectoriesResourcesClient) NewListBySubscriptionPager(options *CiamDirectoriesResourcesClientListBySubscriptionOptions) *runtime.Pager[CiamDirectoriesResourcesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CiamDirectoriesResourcesClientListBySubscriptionResponse]{
		More: func(page CiamDirectoriesResourcesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CiamDirectoriesResourcesClientListBySubscriptionResponse) (CiamDirectoriesResourcesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CiamDirectoriesResourcesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return CiamDirectoriesResourcesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CiamDirectoriesResourcesClient) listBySubscriptionCreateRequest(ctx context.Context, options *CiamDirectoriesResourcesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/ciamDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CiamDirectoriesResourcesClient) listBySubscriptionHandleResponse(resp *http.Response) (CiamDirectoriesResourcesClientListBySubscriptionResponse, error) {
	result := CiamDirectoriesResourcesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CiamDirectoryResourceListResult); err != nil {
		return CiamDirectoriesResourcesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Updates a Ciam Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - properties - The resource properties to be updated.
//   - options - CiamDirectoriesResourcesClientUpdateOptions contains the optional parameters for the CiamDirectoriesResourcesClient.Update
//     method.
func (client *CiamDirectoriesResourcesClient) Update(ctx context.Context, resourceGroupName string, resourceName string, properties CiamDirectoryResourcePatch, options *CiamDirectoriesResourcesClientUpdateOptions) (CiamDirectoriesResourcesClientUpdateResponse, error) {
	var err error
	const operationName = "CiamDirectoriesResourcesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, properties, options)
	if err != nil {
		return CiamDirectoriesResourcesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CiamDirectoriesResourcesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CiamDirectoriesResourcesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *CiamDirectoriesResourcesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, properties CiamDirectoryResourcePatch, options *CiamDirectoriesResourcesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/ciamDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *CiamDirectoriesResourcesClient) updateHandleResponse(resp *http.Response) (CiamDirectoriesResourcesClientUpdateResponse, error) {
	result := CiamDirectoriesResourcesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CiamDirectoryResource); err != nil {
		return CiamDirectoriesResourcesClientUpdateResponse{}, err
	}
	return result, nil
}
