//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// B2CDirectoriesResourcesClient contains the methods for the B2CDirectoriesResources group.
// Don't use this type directly, use NewB2CDirectoriesResourcesClient() instead.
type B2CDirectoriesResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewB2CDirectoriesResourcesClient creates a new instance of B2CDirectoriesResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewB2CDirectoriesResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*B2CDirectoriesResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &B2CDirectoriesResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates a B2c Directory resource, which is used to linking a subscription to an instance of Azure
// AD External Identities. Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - resource - Resource create parameters.
//   - options - B2CDirectoriesResourcesClientBeginCreateOrUpdateOptions contains the optional parameters for the B2CDirectoriesResourcesClient.BeginCreateOrUpdate
//     method.
func (client *B2CDirectoriesResourcesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource B2CDirectoryResource, options *B2CDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*runtime.Poller[B2CDirectoriesResourcesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, resourceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[B2CDirectoriesResourcesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[B2CDirectoriesResourcesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Creates a B2c Directory resource, which is used to linking a subscription to an instance of Azure AD External
// Identities. Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
func (client *B2CDirectoriesResourcesClient) createOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource B2CDirectoryResource, options *B2CDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "B2CDirectoriesResourcesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, resourceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *B2CDirectoriesResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resource B2CDirectoryResource, options *B2CDirectoriesResourcesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes a B2c Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - B2CDirectoriesResourcesClientBeginDeleteOptions contains the optional parameters for the B2CDirectoriesResourcesClient.BeginDelete
//     method.
func (client *B2CDirectoriesResourcesClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *B2CDirectoriesResourcesClientBeginDeleteOptions) (*runtime.Poller[B2CDirectoriesResourcesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[B2CDirectoriesResourcesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[B2CDirectoriesResourcesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes a B2c Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
func (client *B2CDirectoriesResourcesClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *B2CDirectoriesResourcesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "B2CDirectoriesResourcesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *B2CDirectoriesResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *B2CDirectoriesResourcesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a B2c Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - B2CDirectoriesResourcesClientGetOptions contains the optional parameters for the B2CDirectoriesResourcesClient.Get
//     method.
func (client *B2CDirectoriesResourcesClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *B2CDirectoriesResourcesClientGetOptions) (B2CDirectoriesResourcesClientGetResponse, error) {
	var err error
	const operationName = "B2CDirectoriesResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return B2CDirectoriesResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return B2CDirectoriesResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return B2CDirectoriesResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *B2CDirectoriesResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *B2CDirectoriesResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *B2CDirectoriesResourcesClient) getHandleResponse(resp *http.Response) (B2CDirectoriesResourcesClientGetResponse, error) {
	result := B2CDirectoriesResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.B2CDirectoryResource); err != nil {
		return B2CDirectoriesResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets B2c Directory resources under a resource group for the Microsoft.AzureActiveDirectory
// resource provider
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - B2CDirectoriesResourcesClientListByResourceGroupOptions contains the optional parameters for the B2CDirectoriesResourcesClient.NewListByResourceGroupPager
//     method.
func (client *B2CDirectoriesResourcesClient) NewListByResourceGroupPager(resourceGroupName string, options *B2CDirectoriesResourcesClientListByResourceGroupOptions) *runtime.Pager[B2CDirectoriesResourcesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[B2CDirectoriesResourcesClientListByResourceGroupResponse]{
		More: func(page B2CDirectoriesResourcesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *B2CDirectoriesResourcesClientListByResourceGroupResponse) (B2CDirectoriesResourcesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "B2CDirectoriesResourcesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return B2CDirectoriesResourcesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *B2CDirectoriesResourcesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *B2CDirectoriesResourcesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *B2CDirectoriesResourcesClient) listByResourceGroupHandleResponse(resp *http.Response) (B2CDirectoriesResourcesClientListByResourceGroupResponse, error) {
	result := B2CDirectoriesResourcesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.B2CDirectoryResourceListResult); err != nil {
		return B2CDirectoriesResourcesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets B2c Directory resources under a subscription for the Microsoft.AzureActiveDirectory resource
// provider
//
// Generated from API version 2024-05-01
//   - options - B2CDirectoriesResourcesClientListBySubscriptionOptions contains the optional parameters for the B2CDirectoriesResourcesClient.NewListBySubscriptionPager
//     method.
func (client *B2CDirectoriesResourcesClient) NewListBySubscriptionPager(options *B2CDirectoriesResourcesClientListBySubscriptionOptions) *runtime.Pager[B2CDirectoriesResourcesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[B2CDirectoriesResourcesClientListBySubscriptionResponse]{
		More: func(page B2CDirectoriesResourcesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *B2CDirectoriesResourcesClientListBySubscriptionResponse) (B2CDirectoriesResourcesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "B2CDirectoriesResourcesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return B2CDirectoriesResourcesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *B2CDirectoriesResourcesClient) listBySubscriptionCreateRequest(ctx context.Context, options *B2CDirectoriesResourcesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/b2cDirectories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *B2CDirectoriesResourcesClient) listBySubscriptionHandleResponse(resp *http.Response) (B2CDirectoriesResourcesClientListBySubscriptionResponse, error) {
	result := B2CDirectoriesResourcesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.B2CDirectoryResourceListResult); err != nil {
		return B2CDirectoriesResourcesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Updates a B2c Directory resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - properties - The resource properties to be updated.
//   - options - B2CDirectoriesResourcesClientUpdateOptions contains the optional parameters for the B2CDirectoriesResourcesClient.Update
//     method.
func (client *B2CDirectoriesResourcesClient) Update(ctx context.Context, resourceGroupName string, resourceName string, properties B2CDirectoryResourceUpdate, options *B2CDirectoriesResourcesClientUpdateOptions) (B2CDirectoriesResourcesClientUpdateResponse, error) {
	var err error
	const operationName = "B2CDirectoriesResourcesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, properties, options)
	if err != nil {
		return B2CDirectoriesResourcesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return B2CDirectoriesResourcesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return B2CDirectoriesResourcesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *B2CDirectoriesResourcesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, properties B2CDirectoryResourceUpdate, options *B2CDirectoriesResourcesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *B2CDirectoriesResourcesClient) updateHandleResponse(resp *http.Response) (B2CDirectoriesResourcesClientUpdateResponse, error) {
	result := B2CDirectoriesResourcesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.B2CDirectoryResource); err != nil {
		return B2CDirectoriesResourcesClientUpdateResponse{}, err
	}
	return result, nil
}
