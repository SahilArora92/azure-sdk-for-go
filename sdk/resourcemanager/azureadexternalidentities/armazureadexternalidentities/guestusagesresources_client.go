//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GuestUsagesResourcesClient contains the methods for the GuestUsagesResources group.
// Don't use this type directly, use NewGuestUsagesResourcesClient() instead.
type GuestUsagesResourcesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGuestUsagesResourcesClient creates a new instance of GuestUsagesResourcesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGuestUsagesResourcesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GuestUsagesResourcesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GuestUsagesResourcesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates a Guest Usages resource, which is used to linking a subscription to an instance of Azure AD External
// Identities. Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - resource - Resource create parameters.
//   - options - GuestUsagesResourcesClientCreateOrUpdateOptions contains the optional parameters for the GuestUsagesResourcesClient.CreateOrUpdate
//     method.
func (client *GuestUsagesResourcesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, resource GuestUsagesResource, options *GuestUsagesResourcesClientCreateOrUpdateOptions) (GuestUsagesResourcesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "GuestUsagesResourcesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, resourceName, resource, options)
	if err != nil {
		return GuestUsagesResourcesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesResourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return GuestUsagesResourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GuestUsagesResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resource GuestUsagesResource, options *GuestUsagesResourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *GuestUsagesResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (GuestUsagesResourcesClientCreateOrUpdateResponse, error) {
	result := GuestUsagesResourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesResourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - GuestUsagesResourcesClientDeleteOptions contains the optional parameters for the GuestUsagesResourcesClient.Delete
//     method.
func (client *GuestUsagesResourcesClient) Delete(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesResourcesClientDeleteOptions) (GuestUsagesResourcesClientDeleteResponse, error) {
	var err error
	const operationName = "GuestUsagesResourcesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return GuestUsagesResourcesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesResourcesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return GuestUsagesResourcesClientDeleteResponse{}, err
	}
	return GuestUsagesResourcesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *GuestUsagesResourcesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesResourcesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - GuestUsagesResourcesClientGetOptions contains the optional parameters for the GuestUsagesResourcesClient.Get
//     method.
func (client *GuestUsagesResourcesClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesResourcesClientGetOptions) (GuestUsagesResourcesClientGetResponse, error) {
	var err error
	const operationName = "GuestUsagesResourcesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return GuestUsagesResourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GuestUsagesResourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GuestUsagesResourcesClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GuestUsagesResourcesClient) getHandleResponse(resp *http.Response) (GuestUsagesResourcesClientGetResponse, error) {
	result := GuestUsagesResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets Guest Usages resources under a resource group for the Microsoft.AzureActiveDirectory
// resource provider
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - GuestUsagesResourcesClientListByResourceGroupOptions contains the optional parameters for the GuestUsagesResourcesClient.NewListByResourceGroupPager
//     method.
func (client *GuestUsagesResourcesClient) NewListByResourceGroupPager(resourceGroupName string, options *GuestUsagesResourcesClientListByResourceGroupOptions) *runtime.Pager[GuestUsagesResourcesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[GuestUsagesResourcesClientListByResourceGroupResponse]{
		More: func(page GuestUsagesResourcesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GuestUsagesResourcesClientListByResourceGroupResponse) (GuestUsagesResourcesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GuestUsagesResourcesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return GuestUsagesResourcesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *GuestUsagesResourcesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *GuestUsagesResourcesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *GuestUsagesResourcesClient) listByResourceGroupHandleResponse(resp *http.Response) (GuestUsagesResourcesClientListByResourceGroupResponse, error) {
	result := GuestUsagesResourcesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResourceListResult); err != nil {
		return GuestUsagesResourcesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets Guest Usages resources under a subscription for the Microsoft.AzureActiveDirectory resource
// provider
//
// Generated from API version 2024-05-01
//   - options - GuestUsagesResourcesClientListBySubscriptionOptions contains the optional parameters for the GuestUsagesResourcesClient.NewListBySubscriptionPager
//     method.
func (client *GuestUsagesResourcesClient) NewListBySubscriptionPager(options *GuestUsagesResourcesClientListBySubscriptionOptions) *runtime.Pager[GuestUsagesResourcesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[GuestUsagesResourcesClientListBySubscriptionResponse]{
		More: func(page GuestUsagesResourcesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GuestUsagesResourcesClientListBySubscriptionResponse) (GuestUsagesResourcesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GuestUsagesResourcesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return GuestUsagesResourcesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *GuestUsagesResourcesClient) listBySubscriptionCreateRequest(ctx context.Context, options *GuestUsagesResourcesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/guestUsages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *GuestUsagesResourcesClient) listBySubscriptionHandleResponse(resp *http.Response) (GuestUsagesResourcesClientListBySubscriptionResponse, error) {
	result := GuestUsagesResourcesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResourceListResult); err != nil {
		return GuestUsagesResourcesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Updates a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - properties - The resource properties to be updated.
//   - options - GuestUsagesResourcesClientUpdateOptions contains the optional parameters for the GuestUsagesResourcesClient.Update
//     method.
func (client *GuestUsagesResourcesClient) Update(ctx context.Context, resourceGroupName string, resourceName string, properties GuestUsagesResourcePatch, options *GuestUsagesResourcesClientUpdateOptions) (GuestUsagesResourcesClientUpdateResponse, error) {
	var err error
	const operationName = "GuestUsagesResourcesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, properties, options)
	if err != nil {
		return GuestUsagesResourcesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesResourcesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GuestUsagesResourcesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *GuestUsagesResourcesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, properties GuestUsagesResourcePatch, options *GuestUsagesResourcesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *GuestUsagesResourcesClient) updateHandleResponse(resp *http.Response) (GuestUsagesResourcesClientUpdateResponse, error) {
	result := GuestUsagesResourcesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesResourcesClientUpdateResponse{}, err
	}
	return result, nil
}
