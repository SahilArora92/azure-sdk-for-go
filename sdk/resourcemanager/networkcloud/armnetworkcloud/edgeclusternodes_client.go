//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetworkcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EdgeClusterNodesClient contains the methods for the EdgeClusterNodes group.
// Don't use this type directly, use NewEdgeClusterNodesClient() instead.
type EdgeClusterNodesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewEdgeClusterNodesClient creates a new instance of EdgeClusterNodesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewEdgeClusterNodesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EdgeClusterNodesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EdgeClusterNodesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a new edge cluster node or update properties of the edge cluster node if it exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - edgeClusterNodeParameters - The request body.
//   - options - EdgeClusterNodesClientBeginCreateOrUpdateOptions contains the optional parameters for the EdgeClusterNodesClient.BeginCreateOrUpdate
//     method.
func (client *EdgeClusterNodesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeParameters EdgeClusterNode, options *EdgeClusterNodesClientBeginCreateOrUpdateOptions) (*runtime.Poller[EdgeClusterNodesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a new edge cluster node or update properties of the edge cluster node if it exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) createOrUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeParameters EdgeClusterNode, options *EdgeClusterNodesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EdgeClusterNodesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeParameters EdgeClusterNode, options *EdgeClusterNodesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, edgeClusterNodeParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete the provided edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - options - EdgeClusterNodesClientBeginDeleteOptions contains the optional parameters for the EdgeClusterNodesClient.BeginDelete
//     method.
func (client *EdgeClusterNodesClient) BeginDelete(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginDeleteOptions) (*runtime.Poller[EdgeClusterNodesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, edgeClusterName, nodeName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete the provided edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) deleteOperation(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EdgeClusterNodesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get properties of the provided the edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - options - EdgeClusterNodesClientGetOptions contains the optional parameters for the EdgeClusterNodesClient.Get method.
func (client *EdgeClusterNodesClient) Get(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientGetOptions) (EdgeClusterNodesClientGetResponse, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, options)
	if err != nil {
		return EdgeClusterNodesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EdgeClusterNodesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EdgeClusterNodesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EdgeClusterNodesClient) getCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EdgeClusterNodesClient) getHandleResponse(resp *http.Response) (EdgeClusterNodesClientGetResponse, error) {
	result := EdgeClusterNodesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeClusterNode); err != nil {
		return EdgeClusterNodesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByEdgeClusterPager - Get a list of edge cluster nodes in the provided edge cluster.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - options - EdgeClusterNodesClientListByEdgeClusterOptions contains the optional parameters for the EdgeClusterNodesClient.NewListByEdgeClusterPager
//     method.
func (client *EdgeClusterNodesClient) NewListByEdgeClusterPager(resourceGroupName string, edgeClusterName string, options *EdgeClusterNodesClientListByEdgeClusterOptions) *runtime.Pager[EdgeClusterNodesClientListByEdgeClusterResponse] {
	return runtime.NewPager(runtime.PagingHandler[EdgeClusterNodesClientListByEdgeClusterResponse]{
		More: func(page EdgeClusterNodesClientListByEdgeClusterResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EdgeClusterNodesClientListByEdgeClusterResponse) (EdgeClusterNodesClientListByEdgeClusterResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EdgeClusterNodesClient.NewListByEdgeClusterPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByEdgeClusterCreateRequest(ctx, resourceGroupName, edgeClusterName, options)
			}, nil)
			if err != nil {
				return EdgeClusterNodesClientListByEdgeClusterResponse{}, err
			}
			return client.listByEdgeClusterHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByEdgeClusterCreateRequest creates the ListByEdgeCluster request.
func (client *EdgeClusterNodesClient) listByEdgeClusterCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClusterNodesClientListByEdgeClusterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByEdgeClusterHandleResponse handles the ListByEdgeCluster response.
func (client *EdgeClusterNodesClient) listByEdgeClusterHandleResponse(resp *http.Response) (EdgeClusterNodesClientListByEdgeClusterResponse, error) {
	result := EdgeClusterNodesClientListByEdgeClusterResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeClusterNodeList); err != nil {
		return EdgeClusterNodesClientListByEdgeClusterResponse{}, err
	}
	return result, nil
}

// BeginReimage - Reimages the edge cluster node, returning it to a refreshed OS image.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - options - EdgeClusterNodesClientBeginReimageOptions contains the optional parameters for the EdgeClusterNodesClient.BeginReimage
//     method.
func (client *EdgeClusterNodesClient) BeginReimage(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginReimageOptions) (*runtime.Poller[EdgeClusterNodesClientReimageResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.reimage(ctx, resourceGroupName, edgeClusterName, nodeName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientReimageResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientReimageResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Reimage - Reimages the edge cluster node, returning it to a refreshed OS image.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) reimage(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginReimageOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginReimage"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.reimageCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// reimageCreateRequest creates the Reimage request.
func (client *EdgeClusterNodesClient) reimageCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginReimageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/reimage"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginRestart - Restarts the edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - options - EdgeClusterNodesClientBeginRestartOptions contains the optional parameters for the EdgeClusterNodesClient.BeginRestart
//     method.
func (client *EdgeClusterNodesClient) BeginRestart(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginRestartOptions) (*runtime.Poller[EdgeClusterNodesClientRestartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.restart(ctx, resourceGroupName, edgeClusterName, nodeName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientRestartResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientRestartResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Restart - Restarts the edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) restart(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginRestartOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginRestart"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.restartCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// restartCreateRequest creates the Restart request.
func (client *EdgeClusterNodesClient) restartCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginRestartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/restart"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginSynchronizeTime - Synchronizes the time for the edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - options - EdgeClusterNodesClientBeginSynchronizeTimeOptions contains the optional parameters for the EdgeClusterNodesClient.BeginSynchronizeTime
//     method.
func (client *EdgeClusterNodesClient) BeginSynchronizeTime(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginSynchronizeTimeOptions) (*runtime.Poller[EdgeClusterNodesClientSynchronizeTimeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.synchronizeTime(ctx, resourceGroupName, edgeClusterName, nodeName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientSynchronizeTimeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientSynchronizeTimeResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// SynchronizeTime - Synchronizes the time for the edge cluster node.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) synchronizeTime(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginSynchronizeTimeOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginSynchronizeTime"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.synchronizeTimeCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// synchronizeTimeCreateRequest creates the SynchronizeTime request.
func (client *EdgeClusterNodesClient) synchronizeTimeCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *EdgeClusterNodesClientBeginSynchronizeTimeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/synchronizeTime"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginUpdate - Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
// Properties and tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - nodeName - The name of the node.
//   - edgeClusterNodeUpdateParameters - The request body.
//   - options - EdgeClusterNodesClientBeginUpdateOptions contains the optional parameters for the EdgeClusterNodesClient.BeginUpdate
//     method.
func (client *EdgeClusterNodesClient) BeginUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeUpdateParameters EdgeClusterNodePatchParameters, options *EdgeClusterNodesClientBeginUpdateOptions) (*runtime.Poller[EdgeClusterNodesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClusterNodesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClusterNodesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node. Properties
// and tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClusterNodesClient) update(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeUpdateParameters EdgeClusterNodePatchParameters, options *EdgeClusterNodesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClusterNodesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *EdgeClusterNodesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeUpdateParameters EdgeClusterNodePatchParameters, options *EdgeClusterNodesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	if nodeName == "" {
		return nil, errors.New("parameter nodeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeName}", url.PathEscape(nodeName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, edgeClusterNodeUpdateParameters); err != nil {
		return nil, err
	}
	return req, nil
}
