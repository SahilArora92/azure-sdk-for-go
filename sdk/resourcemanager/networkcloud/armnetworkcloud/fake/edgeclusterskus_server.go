//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkcloud/armnetworkcloud"
	"net/http"
	"net/url"
	"regexp"
)

// EdgeClusterSKUsServer is a fake server for instances of the armnetworkcloud.EdgeClusterSKUsClient type.
type EdgeClusterSKUsServer struct {
	// Get is the fake for method EdgeClusterSKUsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, edgeClusterSKUName string, options *armnetworkcloud.EdgeClusterSKUsClientGetOptions) (resp azfake.Responder[armnetworkcloud.EdgeClusterSKUsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListBySubscriptionPager is the fake for method EdgeClusterSKUsClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armnetworkcloud.EdgeClusterSKUsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armnetworkcloud.EdgeClusterSKUsClientListBySubscriptionResponse])
}

// NewEdgeClusterSKUsServerTransport creates a new instance of EdgeClusterSKUsServerTransport with the provided implementation.
// The returned EdgeClusterSKUsServerTransport instance is connected to an instance of armnetworkcloud.EdgeClusterSKUsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEdgeClusterSKUsServerTransport(srv *EdgeClusterSKUsServer) *EdgeClusterSKUsServerTransport {
	return &EdgeClusterSKUsServerTransport{
		srv:                        srv,
		newListBySubscriptionPager: newTracker[azfake.PagerResponder[armnetworkcloud.EdgeClusterSKUsClientListBySubscriptionResponse]](),
	}
}

// EdgeClusterSKUsServerTransport connects instances of armnetworkcloud.EdgeClusterSKUsClient to instances of EdgeClusterSKUsServer.
// Don't use this type directly, use NewEdgeClusterSKUsServerTransport instead.
type EdgeClusterSKUsServerTransport struct {
	srv                        *EdgeClusterSKUsServer
	newListBySubscriptionPager *tracker[azfake.PagerResponder[armnetworkcloud.EdgeClusterSKUsClientListBySubscriptionResponse]]
}

// Do implements the policy.Transporter interface for EdgeClusterSKUsServerTransport.
func (e *EdgeClusterSKUsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EdgeClusterSKUsClient.Get":
		resp, err = e.dispatchGet(req)
	case "EdgeClusterSKUsClient.NewListBySubscriptionPager":
		resp, err = e.dispatchNewListBySubscriptionPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EdgeClusterSKUsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if e.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusterSkus/(?P<edgeClusterSkuName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	edgeClusterSKUNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterSkuName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Get(req.Context(), edgeClusterSKUNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EdgeClusterSKU, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EdgeClusterSKUsServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := e.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusterSkus`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := e.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		e.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armnetworkcloud.EdgeClusterSKUsClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		e.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}
