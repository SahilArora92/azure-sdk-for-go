//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkcloud/armnetworkcloud"
	"net/http"
	"net/url"
	"regexp"
)

// RegistrationHubImagesServer is a fake server for instances of the armnetworkcloud.RegistrationHubImagesClient type.
type RegistrationHubImagesServer struct {
	// BeginCreateOrUpdate is the fake for method RegistrationHubImagesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, registrationHubName string, imageName string, registrationHubImageParameters armnetworkcloud.RegistrationHubImage, options *armnetworkcloud.RegistrationHubImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method RegistrationHubImagesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, registrationHubName string, imageName string, options *armnetworkcloud.RegistrationHubImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method RegistrationHubImagesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, registrationHubName string, imageName string, options *armnetworkcloud.RegistrationHubImagesClientGetOptions) (resp azfake.Responder[armnetworkcloud.RegistrationHubImagesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByRegistrationHubPager is the fake for method RegistrationHubImagesClient.NewListByRegistrationHubPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByRegistrationHubPager func(resourceGroupName string, registrationHubName string, options *armnetworkcloud.RegistrationHubImagesClientListByRegistrationHubOptions) (resp azfake.PagerResponder[armnetworkcloud.RegistrationHubImagesClientListByRegistrationHubResponse])

	// BeginUpdate is the fake for method RegistrationHubImagesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, registrationHubName string, imageName string, registrationHubImageUpdateParameters armnetworkcloud.RegistrationHubImagePatchParameters, options *armnetworkcloud.RegistrationHubImagesClientBeginUpdateOptions) (resp azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewRegistrationHubImagesServerTransport creates a new instance of RegistrationHubImagesServerTransport with the provided implementation.
// The returned RegistrationHubImagesServerTransport instance is connected to an instance of armnetworkcloud.RegistrationHubImagesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRegistrationHubImagesServerTransport(srv *RegistrationHubImagesServer) *RegistrationHubImagesServerTransport {
	return &RegistrationHubImagesServerTransport{
		srv:                           srv,
		beginCreateOrUpdate:           newTracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientCreateOrUpdateResponse]](),
		beginDelete:                   newTracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientDeleteResponse]](),
		newListByRegistrationHubPager: newTracker[azfake.PagerResponder[armnetworkcloud.RegistrationHubImagesClientListByRegistrationHubResponse]](),
		beginUpdate:                   newTracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientUpdateResponse]](),
	}
}

// RegistrationHubImagesServerTransport connects instances of armnetworkcloud.RegistrationHubImagesClient to instances of RegistrationHubImagesServer.
// Don't use this type directly, use NewRegistrationHubImagesServerTransport instead.
type RegistrationHubImagesServerTransport struct {
	srv                           *RegistrationHubImagesServer
	beginCreateOrUpdate           *tracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientCreateOrUpdateResponse]]
	beginDelete                   *tracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientDeleteResponse]]
	newListByRegistrationHubPager *tracker[azfake.PagerResponder[armnetworkcloud.RegistrationHubImagesClientListByRegistrationHubResponse]]
	beginUpdate                   *tracker[azfake.PollerResponder[armnetworkcloud.RegistrationHubImagesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for RegistrationHubImagesServerTransport.
func (r *RegistrationHubImagesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "RegistrationHubImagesClient.BeginCreateOrUpdate":
		resp, err = r.dispatchBeginCreateOrUpdate(req)
	case "RegistrationHubImagesClient.BeginDelete":
		resp, err = r.dispatchBeginDelete(req)
	case "RegistrationHubImagesClient.Get":
		resp, err = r.dispatchGet(req)
	case "RegistrationHubImagesClient.NewListByRegistrationHubPager":
		resp, err = r.dispatchNewListByRegistrationHubPager(req)
	case "RegistrationHubImagesClient.BeginUpdate":
		resp, err = r.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *RegistrationHubImagesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := r.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/registrationHubs/(?P<registrationHubName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/images/(?P<imageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armnetworkcloud.RegistrationHubImage](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		registrationHubNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationHubName")])
		if err != nil {
			return nil, err
		}
		imageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, registrationHubNameParam, imageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		r.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		r.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		r.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (r *RegistrationHubImagesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if r.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := r.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/registrationHubs/(?P<registrationHubName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/images/(?P<imageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		registrationHubNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationHubName")])
		if err != nil {
			return nil, err
		}
		imageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginDelete(req.Context(), resourceGroupNameParam, registrationHubNameParam, imageNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		r.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		r.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		r.beginDelete.remove(req)
	}

	return resp, nil
}

func (r *RegistrationHubImagesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/registrationHubs/(?P<registrationHubName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/images/(?P<imageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	registrationHubNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationHubName")])
	if err != nil {
		return nil, err
	}
	imageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Get(req.Context(), resourceGroupNameParam, registrationHubNameParam, imageNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegistrationHubImage, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegistrationHubImagesServerTransport) dispatchNewListByRegistrationHubPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListByRegistrationHubPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByRegistrationHubPager not implemented")}
	}
	newListByRegistrationHubPager := r.newListByRegistrationHubPager.get(req)
	if newListByRegistrationHubPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/registrationHubs/(?P<registrationHubName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/images`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		registrationHubNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationHubName")])
		if err != nil {
			return nil, err
		}
		resp := r.srv.NewListByRegistrationHubPager(resourceGroupNameParam, registrationHubNameParam, nil)
		newListByRegistrationHubPager = &resp
		r.newListByRegistrationHubPager.add(req, newListByRegistrationHubPager)
		server.PagerResponderInjectNextLinks(newListByRegistrationHubPager, req, func(page *armnetworkcloud.RegistrationHubImagesClientListByRegistrationHubResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByRegistrationHubPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListByRegistrationHubPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByRegistrationHubPager) {
		r.newListByRegistrationHubPager.remove(req)
	}
	return resp, nil
}

func (r *RegistrationHubImagesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := r.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/registrationHubs/(?P<registrationHubName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/images/(?P<imageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armnetworkcloud.RegistrationHubImagePatchParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		registrationHubNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registrationHubName")])
		if err != nil {
			return nil, err
		}
		imageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("imageName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginUpdate(req.Context(), resourceGroupNameParam, registrationHubNameParam, imageNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		r.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		r.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		r.beginUpdate.remove(req)
	}

	return resp, nil
}
