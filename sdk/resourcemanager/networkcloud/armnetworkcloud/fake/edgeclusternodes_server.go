//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkcloud/armnetworkcloud"
	"net/http"
	"net/url"
	"regexp"
)

// EdgeClusterNodesServer is a fake server for instances of the armnetworkcloud.EdgeClusterNodesClient type.
type EdgeClusterNodesServer struct {
	// BeginCreateOrUpdate is the fake for method EdgeClusterNodesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeParameters armnetworkcloud.EdgeClusterNode, options *armnetworkcloud.EdgeClusterNodesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method EdgeClusterNodesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *armnetworkcloud.EdgeClusterNodesClientBeginDeleteOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method EdgeClusterNodesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *armnetworkcloud.EdgeClusterNodesClientGetOptions) (resp azfake.Responder[armnetworkcloud.EdgeClusterNodesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByEdgeClusterPager is the fake for method EdgeClusterNodesClient.NewListByEdgeClusterPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByEdgeClusterPager func(resourceGroupName string, edgeClusterName string, options *armnetworkcloud.EdgeClusterNodesClientListByEdgeClusterOptions) (resp azfake.PagerResponder[armnetworkcloud.EdgeClusterNodesClientListByEdgeClusterResponse])

	// BeginReimage is the fake for method EdgeClusterNodesClient.BeginReimage
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginReimage func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *armnetworkcloud.EdgeClusterNodesClientBeginReimageOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientReimageResponse], errResp azfake.ErrorResponder)

	// BeginRestart is the fake for method EdgeClusterNodesClient.BeginRestart
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginRestart func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *armnetworkcloud.EdgeClusterNodesClientBeginRestartOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientRestartResponse], errResp azfake.ErrorResponder)

	// BeginSynchronizeTime is the fake for method EdgeClusterNodesClient.BeginSynchronizeTime
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginSynchronizeTime func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, options *armnetworkcloud.EdgeClusterNodesClientBeginSynchronizeTimeOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientSynchronizeTimeResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method EdgeClusterNodesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, edgeClusterName string, nodeName string, edgeClusterNodeUpdateParameters armnetworkcloud.EdgeClusterNodePatchParameters, options *armnetworkcloud.EdgeClusterNodesClientBeginUpdateOptions) (resp azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewEdgeClusterNodesServerTransport creates a new instance of EdgeClusterNodesServerTransport with the provided implementation.
// The returned EdgeClusterNodesServerTransport instance is connected to an instance of armnetworkcloud.EdgeClusterNodesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEdgeClusterNodesServerTransport(srv *EdgeClusterNodesServer) *EdgeClusterNodesServerTransport {
	return &EdgeClusterNodesServerTransport{
		srv:                       srv,
		beginCreateOrUpdate:       newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientCreateOrUpdateResponse]](),
		beginDelete:               newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientDeleteResponse]](),
		newListByEdgeClusterPager: newTracker[azfake.PagerResponder[armnetworkcloud.EdgeClusterNodesClientListByEdgeClusterResponse]](),
		beginReimage:              newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientReimageResponse]](),
		beginRestart:              newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientRestartResponse]](),
		beginSynchronizeTime:      newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientSynchronizeTimeResponse]](),
		beginUpdate:               newTracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientUpdateResponse]](),
	}
}

// EdgeClusterNodesServerTransport connects instances of armnetworkcloud.EdgeClusterNodesClient to instances of EdgeClusterNodesServer.
// Don't use this type directly, use NewEdgeClusterNodesServerTransport instead.
type EdgeClusterNodesServerTransport struct {
	srv                       *EdgeClusterNodesServer
	beginCreateOrUpdate       *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientCreateOrUpdateResponse]]
	beginDelete               *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientDeleteResponse]]
	newListByEdgeClusterPager *tracker[azfake.PagerResponder[armnetworkcloud.EdgeClusterNodesClientListByEdgeClusterResponse]]
	beginReimage              *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientReimageResponse]]
	beginRestart              *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientRestartResponse]]
	beginSynchronizeTime      *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientSynchronizeTimeResponse]]
	beginUpdate               *tracker[azfake.PollerResponder[armnetworkcloud.EdgeClusterNodesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for EdgeClusterNodesServerTransport.
func (e *EdgeClusterNodesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EdgeClusterNodesClient.BeginCreateOrUpdate":
		resp, err = e.dispatchBeginCreateOrUpdate(req)
	case "EdgeClusterNodesClient.BeginDelete":
		resp, err = e.dispatchBeginDelete(req)
	case "EdgeClusterNodesClient.Get":
		resp, err = e.dispatchGet(req)
	case "EdgeClusterNodesClient.NewListByEdgeClusterPager":
		resp, err = e.dispatchNewListByEdgeClusterPager(req)
	case "EdgeClusterNodesClient.BeginReimage":
		resp, err = e.dispatchBeginReimage(req)
	case "EdgeClusterNodesClient.BeginRestart":
		resp, err = e.dispatchBeginRestart(req)
	case "EdgeClusterNodesClient.BeginSynchronizeTime":
		resp, err = e.dispatchBeginSynchronizeTime(req)
	case "EdgeClusterNodesClient.BeginUpdate":
		resp, err = e.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := e.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armnetworkcloud.EdgeClusterNode](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		e.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		e.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		e.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := e.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDelete(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		e.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		e.beginDelete.remove(req)
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if e.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
	if err != nil {
		return nil, err
	}
	nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Get(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EdgeClusterNode, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchNewListByEdgeClusterPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListByEdgeClusterPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByEdgeClusterPager not implemented")}
	}
	newListByEdgeClusterPager := e.newListByEdgeClusterPager.get(req)
	if newListByEdgeClusterPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListByEdgeClusterPager(resourceGroupNameParam, edgeClusterNameParam, nil)
		newListByEdgeClusterPager = &resp
		e.newListByEdgeClusterPager.add(req, newListByEdgeClusterPager)
		server.PagerResponderInjectNextLinks(newListByEdgeClusterPager, req, func(page *armnetworkcloud.EdgeClusterNodesClientListByEdgeClusterResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByEdgeClusterPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListByEdgeClusterPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByEdgeClusterPager) {
		e.newListByEdgeClusterPager.remove(req)
	}
	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginReimage(req *http.Request) (*http.Response, error) {
	if e.srv.BeginReimage == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginReimage not implemented")}
	}
	beginReimage := e.beginReimage.get(req)
	if beginReimage == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reimage`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginReimage(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginReimage = &respr
		e.beginReimage.add(req, beginReimage)
	}

	resp, err := server.PollerResponderNext(beginReimage, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginReimage.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginReimage) {
		e.beginReimage.remove(req)
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if e.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginRestart not implemented")}
	}
	beginRestart := e.beginRestart.get(req)
	if beginRestart == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/restart`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginRestart(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginRestart = &respr
		e.beginRestart.add(req, beginRestart)
	}

	resp, err := server.PollerResponderNext(beginRestart, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginRestart.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginRestart) {
		e.beginRestart.remove(req)
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginSynchronizeTime(req *http.Request) (*http.Response, error) {
	if e.srv.BeginSynchronizeTime == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginSynchronizeTime not implemented")}
	}
	beginSynchronizeTime := e.beginSynchronizeTime.get(req)
	if beginSynchronizeTime == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/synchronizeTime`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginSynchronizeTime(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginSynchronizeTime = &respr
		e.beginSynchronizeTime.add(req, beginSynchronizeTime)
	}

	resp, err := server.PollerResponderNext(beginSynchronizeTime, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginSynchronizeTime.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginSynchronizeTime) {
		e.beginSynchronizeTime.remove(req)
	}

	return resp, nil
}

func (e *EdgeClusterNodesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := e.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetworkCloud/edgeClusters/(?P<edgeClusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/nodes/(?P<nodeName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armnetworkcloud.EdgeClusterNodePatchParameters](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		edgeClusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("edgeClusterName")])
		if err != nil {
			return nil, err
		}
		nodeNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginUpdate(req.Context(), resourceGroupNameParam, edgeClusterNameParam, nodeNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		e.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		e.beginUpdate.remove(req)
	}

	return resp, nil
}
