//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetworkcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EdgeClustersClient contains the methods for the EdgeClusters group.
// Don't use this type directly, use NewEdgeClustersClient() instead.
type EdgeClustersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewEdgeClustersClient creates a new instance of EdgeClustersClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewEdgeClustersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EdgeClustersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EdgeClustersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a new edge cluster or update properties of the edge cluster if it exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - edgeClusterParameters - The request body.
//   - options - EdgeClustersClientBeginCreateOrUpdateOptions contains the optional parameters for the EdgeClustersClient.BeginCreateOrUpdate
//     method.
func (client *EdgeClustersClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterParameters EdgeCluster, options *EdgeClustersClientBeginCreateOrUpdateOptions) (*runtime.Poller[EdgeClustersClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, edgeClusterName, edgeClusterParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClustersClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClustersClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a new edge cluster or update properties of the edge cluster if it exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClustersClient) createOrUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterParameters EdgeCluster, options *EdgeClustersClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClustersClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, edgeClusterName, edgeClusterParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EdgeClustersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterParameters EdgeCluster, options *EdgeClustersClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, edgeClusterParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete the provided edge cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - options - EdgeClustersClientBeginDeleteOptions contains the optional parameters for the EdgeClustersClient.BeginDelete
//     method.
func (client *EdgeClustersClient) BeginDelete(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientBeginDeleteOptions) (*runtime.Poller[EdgeClustersClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, edgeClusterName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClustersClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClustersClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete the provided edge cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClustersClient) deleteOperation(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClustersClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, edgeClusterName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EdgeClustersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get properties of the provided the edge cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - options - EdgeClustersClientGetOptions contains the optional parameters for the EdgeClustersClient.Get method.
func (client *EdgeClustersClient) Get(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientGetOptions) (EdgeClustersClientGetResponse, error) {
	var err error
	const operationName = "EdgeClustersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, edgeClusterName, options)
	if err != nil {
		return EdgeClustersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EdgeClustersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EdgeClustersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EdgeClustersClient) getCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EdgeClustersClient) getHandleResponse(resp *http.Response) (EdgeClustersClientGetResponse, error) {
	result := EdgeClustersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeCluster); err != nil {
		return EdgeClustersClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get a list of edge clusters in the provided resource group.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - EdgeClustersClientListByResourceGroupOptions contains the optional parameters for the EdgeClustersClient.NewListByResourceGroupPager
//     method.
func (client *EdgeClustersClient) NewListByResourceGroupPager(resourceGroupName string, options *EdgeClustersClientListByResourceGroupOptions) *runtime.Pager[EdgeClustersClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[EdgeClustersClientListByResourceGroupResponse]{
		More: func(page EdgeClustersClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EdgeClustersClientListByResourceGroupResponse) (EdgeClustersClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EdgeClustersClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return EdgeClustersClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *EdgeClustersClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *EdgeClustersClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *EdgeClustersClient) listByResourceGroupHandleResponse(resp *http.Response) (EdgeClustersClientListByResourceGroupResponse, error) {
	result := EdgeClustersClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeClusterList); err != nil {
		return EdgeClustersClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get a list of edge clusters in the provided subscription.
//
// Generated from API version 2024-05-01-preview
//   - options - EdgeClustersClientListBySubscriptionOptions contains the optional parameters for the EdgeClustersClient.NewListBySubscriptionPager
//     method.
func (client *EdgeClustersClient) NewListBySubscriptionPager(options *EdgeClustersClientListBySubscriptionOptions) *runtime.Pager[EdgeClustersClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[EdgeClustersClientListBySubscriptionResponse]{
		More: func(page EdgeClustersClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EdgeClustersClientListBySubscriptionResponse) (EdgeClustersClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EdgeClustersClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return EdgeClustersClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *EdgeClustersClient) listBySubscriptionCreateRequest(ctx context.Context, options *EdgeClustersClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/edgeClusters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *EdgeClustersClient) listBySubscriptionHandleResponse(resp *http.Response) (EdgeClustersClientListBySubscriptionResponse, error) {
	result := EdgeClustersClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EdgeClusterList); err != nil {
		return EdgeClustersClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// ListClusterUserCredential - Generates and returns the kubernetes configuration credentials for the edge cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - options - EdgeClustersClientListClusterUserCredentialOptions contains the optional parameters for the EdgeClustersClient.ListClusterUserCredential
//     method.
func (client *EdgeClustersClient) ListClusterUserCredential(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientListClusterUserCredentialOptions) (EdgeClustersClientListClusterUserCredentialResponse, error) {
	var err error
	const operationName = "EdgeClustersClient.ListClusterUserCredential"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listClusterUserCredentialCreateRequest(ctx, resourceGroupName, edgeClusterName, options)
	if err != nil {
		return EdgeClustersClientListClusterUserCredentialResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EdgeClustersClientListClusterUserCredentialResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EdgeClustersClientListClusterUserCredentialResponse{}, err
	}
	resp, err := client.listClusterUserCredentialHandleResponse(httpResp)
	return resp, err
}

// listClusterUserCredentialCreateRequest creates the ListClusterUserCredential request.
func (client *EdgeClustersClient) listClusterUserCredentialCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, options *EdgeClustersClientListClusterUserCredentialOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/listClusterUserCredential"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.ListUserCredentialParameters != nil {
		if err := runtime.MarshalAsJSON(req, *options.ListUserCredentialParameters); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// listClusterUserCredentialHandleResponse handles the ListClusterUserCredential response.
func (client *EdgeClustersClient) listClusterUserCredentialHandleResponse(resp *http.Response) (EdgeClustersClientListClusterUserCredentialResponse, error) {
	result := EdgeClustersClientListClusterUserCredentialResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResults); err != nil {
		return EdgeClustersClientListClusterUserCredentialResponse{}, err
	}
	return result, nil
}

// BeginStageRuntime - Prepares and stages the images to the edge cluster nodes for the specified runtime version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - edgeClusterStageRuntimeParameters - The request body.
//   - options - EdgeClustersClientBeginStageRuntimeOptions contains the optional parameters for the EdgeClustersClient.BeginStageRuntime
//     method.
func (client *EdgeClustersClient) BeginStageRuntime(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterStageRuntimeParameters EdgeClusterStageRuntimeParameters, options *EdgeClustersClientBeginStageRuntimeOptions) (*runtime.Poller[EdgeClustersClientStageRuntimeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.stageRuntime(ctx, resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClustersClientStageRuntimeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClustersClientStageRuntimeResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// StageRuntime - Prepares and stages the images to the edge cluster nodes for the specified runtime version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClustersClient) stageRuntime(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterStageRuntimeParameters EdgeClusterStageRuntimeParameters, options *EdgeClustersClientBeginStageRuntimeOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClustersClient.BeginStageRuntime"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.stageRuntimeCreateRequest(ctx, resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// stageRuntimeCreateRequest creates the StageRuntime request.
func (client *EdgeClustersClient) stageRuntimeCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterStageRuntimeParameters EdgeClusterStageRuntimeParameters, options *EdgeClustersClientBeginStageRuntimeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/stageRuntime"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, edgeClusterStageRuntimeParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties
// and tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - edgeClusterName - The name of the edge cluster.
//   - edgeClusterUpdateParameters - The request body.
//   - options - EdgeClustersClientBeginUpdateOptions contains the optional parameters for the EdgeClustersClient.BeginUpdate
//     method.
func (client *EdgeClustersClient) BeginUpdate(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterUpdateParameters EdgeClusterPatchParameters, options *EdgeClustersClientBeginUpdateOptions) (*runtime.Poller[EdgeClustersClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EdgeClustersClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EdgeClustersClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
// tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *EdgeClustersClient) update(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterUpdateParameters EdgeClusterPatchParameters, options *EdgeClustersClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EdgeClustersClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *EdgeClustersClient) updateCreateRequest(ctx context.Context, resourceGroupName string, edgeClusterName string, edgeClusterUpdateParameters EdgeClusterPatchParameters, options *EdgeClustersClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if edgeClusterName == "" {
		return nil, errors.New("parameter edgeClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{edgeClusterName}", url.PathEscape(edgeClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, edgeClusterUpdateParameters); err != nil {
		return nil, err
	}
	return req, nil
}
