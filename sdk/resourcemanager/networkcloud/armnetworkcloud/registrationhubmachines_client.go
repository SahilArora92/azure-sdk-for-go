//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetworkcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RegistrationHubMachinesClient contains the methods for the RegistrationHubMachines group.
// Don't use this type directly, use NewRegistrationHubMachinesClient() instead.
type RegistrationHubMachinesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewRegistrationHubMachinesClient creates a new instance of RegistrationHubMachinesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewRegistrationHubMachinesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*RegistrationHubMachinesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &RegistrationHubMachinesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a new registration hub machine or update properties of the existing one.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - machineName - The name of the registration hub machine.
//   - registrationHubMachineParameters - The request body.
//   - options - RegistrationHubMachinesClientBeginCreateOrUpdateOptions contains the optional parameters for the RegistrationHubMachinesClient.BeginCreateOrUpdate
//     method.
func (client *RegistrationHubMachinesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineParameters RegistrationHubMachine, options *RegistrationHubMachinesClientBeginCreateOrUpdateOptions) (*runtime.Poller[RegistrationHubMachinesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, registrationHubName, machineName, registrationHubMachineParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RegistrationHubMachinesClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RegistrationHubMachinesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a new registration hub machine or update properties of the existing one.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *RegistrationHubMachinesClient) createOrUpdate(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineParameters RegistrationHubMachine, options *RegistrationHubMachinesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "RegistrationHubMachinesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, registrationHubName, machineName, registrationHubMachineParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RegistrationHubMachinesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineParameters RegistrationHubMachine, options *RegistrationHubMachinesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, registrationHubMachineParameters); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDecline - Declines a machine that is pending approval during registration. This effectively “dead ends” this machine
// and is an explicit refusal to let the machine proceed with further provisioning.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - machineName - The name of the registration hub machine.
//   - options - RegistrationHubMachinesClientBeginDeclineOptions contains the optional parameters for the RegistrationHubMachinesClient.BeginDecline
//     method.
func (client *RegistrationHubMachinesClient) BeginDecline(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeclineOptions) (*runtime.Poller[RegistrationHubMachinesClientDeclineResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.decline(ctx, resourceGroupName, registrationHubName, machineName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RegistrationHubMachinesClientDeclineResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RegistrationHubMachinesClientDeclineResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Decline - Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and
// is an explicit refusal to let the machine proceed with further provisioning.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *RegistrationHubMachinesClient) decline(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeclineOptions) (*http.Response, error) {
	var err error
	const operationName = "RegistrationHubMachinesClient.BeginDecline"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.declineCreateRequest(ctx, resourceGroupName, registrationHubName, machineName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// declineCreateRequest creates the Decline request.
func (client *RegistrationHubMachinesClient) declineCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeclineOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}/decline"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDelete - Delete the provided registration hub machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - machineName - The name of the registration hub machine.
//   - options - RegistrationHubMachinesClientBeginDeleteOptions contains the optional parameters for the RegistrationHubMachinesClient.BeginDelete
//     method.
func (client *RegistrationHubMachinesClient) BeginDelete(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeleteOptions) (*runtime.Poller[RegistrationHubMachinesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, registrationHubName, machineName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RegistrationHubMachinesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RegistrationHubMachinesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete the provided registration hub machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *RegistrationHubMachinesClient) deleteOperation(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "RegistrationHubMachinesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, registrationHubName, machineName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *RegistrationHubMachinesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get properties of the provided registration hub machine.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - machineName - The name of the registration hub machine.
//   - options - RegistrationHubMachinesClientGetOptions contains the optional parameters for the RegistrationHubMachinesClient.Get
//     method.
func (client *RegistrationHubMachinesClient) Get(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientGetOptions) (RegistrationHubMachinesClientGetResponse, error) {
	var err error
	const operationName = "RegistrationHubMachinesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, registrationHubName, machineName, options)
	if err != nil {
		return RegistrationHubMachinesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RegistrationHubMachinesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RegistrationHubMachinesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *RegistrationHubMachinesClient) getCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, options *RegistrationHubMachinesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RegistrationHubMachinesClient) getHandleResponse(resp *http.Response) (RegistrationHubMachinesClientGetResponse, error) {
	result := RegistrationHubMachinesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RegistrationHubMachine); err != nil {
		return RegistrationHubMachinesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByRegistrationHubPager - Get a list of machines in the provided registration hub.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - options - RegistrationHubMachinesClientListByRegistrationHubOptions contains the optional parameters for the RegistrationHubMachinesClient.NewListByRegistrationHubPager
//     method.
func (client *RegistrationHubMachinesClient) NewListByRegistrationHubPager(resourceGroupName string, registrationHubName string, options *RegistrationHubMachinesClientListByRegistrationHubOptions) *runtime.Pager[RegistrationHubMachinesClientListByRegistrationHubResponse] {
	return runtime.NewPager(runtime.PagingHandler[RegistrationHubMachinesClientListByRegistrationHubResponse]{
		More: func(page RegistrationHubMachinesClientListByRegistrationHubResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RegistrationHubMachinesClientListByRegistrationHubResponse) (RegistrationHubMachinesClientListByRegistrationHubResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "RegistrationHubMachinesClient.NewListByRegistrationHubPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByRegistrationHubCreateRequest(ctx, resourceGroupName, registrationHubName, options)
			}, nil)
			if err != nil {
				return RegistrationHubMachinesClientListByRegistrationHubResponse{}, err
			}
			return client.listByRegistrationHubHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByRegistrationHubCreateRequest creates the ListByRegistrationHub request.
func (client *RegistrationHubMachinesClient) listByRegistrationHubCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, options *RegistrationHubMachinesClientListByRegistrationHubOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByRegistrationHubHandleResponse handles the ListByRegistrationHub response.
func (client *RegistrationHubMachinesClient) listByRegistrationHubHandleResponse(resp *http.Response) (RegistrationHubMachinesClientListByRegistrationHubResponse, error) {
	result := RegistrationHubMachinesClientListByRegistrationHubResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RegistrationHubMachineList); err != nil {
		return RegistrationHubMachinesClientListByRegistrationHubResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Patch properties of the provided registration hub machine, or update the tags associated with the registration
// hub machine. Properties and tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - registrationHubName - The name of the registration hub.
//   - machineName - The name of the registration hub machine.
//   - registrationHubMachineUpdateParameters - The request body.
//   - options - RegistrationHubMachinesClientBeginUpdateOptions contains the optional parameters for the RegistrationHubMachinesClient.BeginUpdate
//     method.
func (client *RegistrationHubMachinesClient) BeginUpdate(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineUpdateParameters RegistrationHubMachinePatchParameters, options *RegistrationHubMachinesClientBeginUpdateOptions) (*runtime.Poller[RegistrationHubMachinesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, registrationHubName, machineName, registrationHubMachineUpdateParameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[RegistrationHubMachinesClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[RegistrationHubMachinesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch properties of the provided registration hub machine, or update the tags associated with the registration
// hub machine. Properties and tag updates can be done independently.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-05-01-preview
func (client *RegistrationHubMachinesClient) update(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineUpdateParameters RegistrationHubMachinePatchParameters, options *RegistrationHubMachinesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "RegistrationHubMachinesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, registrationHubName, machineName, registrationHubMachineUpdateParameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *RegistrationHubMachinesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, registrationHubName string, machineName string, registrationHubMachineUpdateParameters RegistrationHubMachinePatchParameters, options *RegistrationHubMachinesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if registrationHubName == "" {
		return nil, errors.New("parameter registrationHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationHubName}", url.PathEscape(registrationHubName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, registrationHubMachineUpdateParameters); err != nil {
		return nil, err
	}
	return req, nil
}
