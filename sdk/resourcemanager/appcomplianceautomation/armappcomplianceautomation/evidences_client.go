//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcomplianceautomation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// EvidencesClient contains the methods for the Evidences group.
// Don't use this type directly, use NewEvidencesClient() instead.
type EvidencesClient struct {
	internal *arm.Client
}

// NewEvidencesClient creates a new instance of EvidencesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewEvidencesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*EvidencesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EvidencesClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or Update an evidence a specified report
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - evidenceName - The evidence name.
//   - resource - Parameters for the create or update operation
//   - options - EvidencesClientCreateOrUpdateOptions contains the optional parameters for the EvidencesClient.CreateOrUpdate
//     method.
func (client *EvidencesClient) CreateOrUpdate(ctx context.Context, reportName string, evidenceName string, resource EvidenceResource, options *EvidencesClientCreateOrUpdateOptions) (EvidencesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "EvidencesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, reportName, evidenceName, resource, options)
	if err != nil {
		return EvidencesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EvidencesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return EvidencesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EvidencesClient) createOrUpdateCreateRequest(ctx context.Context, reportName string, evidenceName string, resource EvidenceResource, options *EvidencesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	if evidenceName == "" {
		return nil, errors.New("parameter evidenceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{evidenceName}", url.PathEscape(evidenceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	if options != nil && options.OfferGUID != nil {
		reqQP.Set("offerGuid", *options.OfferGUID)
	}
	if options != nil && options.ReportCreatorTenantID != nil {
		reqQP.Set("reportCreatorTenantId", *options.ReportCreatorTenantID)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *EvidencesClient) createOrUpdateHandleResponse(resp *http.Response) (EvidencesClientCreateOrUpdateResponse, error) {
	result := EvidencesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EvidenceResource); err != nil {
		return EvidencesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete an existent evidence from a specified report
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - evidenceName - The evidence name.
//   - options - EvidencesClientDeleteOptions contains the optional parameters for the EvidencesClient.Delete method.
func (client *EvidencesClient) Delete(ctx context.Context, reportName string, evidenceName string, options *EvidencesClientDeleteOptions) (EvidencesClientDeleteResponse, error) {
	var err error
	const operationName = "EvidencesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, reportName, evidenceName, options)
	if err != nil {
		return EvidencesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EvidencesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return EvidencesClientDeleteResponse{}, err
	}
	return EvidencesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EvidencesClient) deleteCreateRequest(ctx context.Context, reportName string, evidenceName string, options *EvidencesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	if evidenceName == "" {
		return nil, errors.New("parameter evidenceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{evidenceName}", url.PathEscape(evidenceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Download - Download evidence file.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - evidenceName - The evidence name.
//   - parameters - Parameters for the query operation
//   - options - EvidencesClientDownloadOptions contains the optional parameters for the EvidencesClient.Download method.
func (client *EvidencesClient) Download(ctx context.Context, reportName string, evidenceName string, parameters EvidenceFileDownloadRequest, options *EvidencesClientDownloadOptions) (EvidencesClientDownloadResponse, error) {
	var err error
	const operationName = "EvidencesClient.Download"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.downloadCreateRequest(ctx, reportName, evidenceName, parameters, options)
	if err != nil {
		return EvidencesClientDownloadResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EvidencesClientDownloadResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EvidencesClientDownloadResponse{}, err
	}
	resp, err := client.downloadHandleResponse(httpResp)
	return resp, err
}

// downloadCreateRequest creates the Download request.
func (client *EvidencesClient) downloadCreateRequest(ctx context.Context, reportName string, evidenceName string, parameters EvidenceFileDownloadRequest, options *EvidencesClientDownloadOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}/download"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	if evidenceName == "" {
		return nil, errors.New("parameter evidenceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{evidenceName}", url.PathEscape(evidenceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// downloadHandleResponse handles the Download response.
func (client *EvidencesClient) downloadHandleResponse(resp *http.Response) (EvidencesClientDownloadResponse, error) {
	result := EvidencesClientDownloadResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EvidenceFileDownloadResponse); err != nil {
		return EvidencesClientDownloadResponse{}, err
	}
	return result, nil
}

// Get - Get the evidence metadata
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - evidenceName - The evidence name.
//   - options - EvidencesClientGetOptions contains the optional parameters for the EvidencesClient.Get method.
func (client *EvidencesClient) Get(ctx context.Context, reportName string, evidenceName string, options *EvidencesClientGetOptions) (EvidencesClientGetResponse, error) {
	var err error
	const operationName = "EvidencesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, reportName, evidenceName, options)
	if err != nil {
		return EvidencesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EvidencesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EvidencesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EvidencesClient) getCreateRequest(ctx context.Context, reportName string, evidenceName string, options *EvidencesClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	if evidenceName == "" {
		return nil, errors.New("parameter evidenceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{evidenceName}", url.PathEscape(evidenceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EvidencesClient) getHandleResponse(resp *http.Response) (EvidencesClientGetResponse, error) {
	result := EvidencesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EvidenceResource); err != nil {
		return EvidencesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByReportPager - Returns a paginated list of evidences for a specified report.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - options - EvidencesClientListByReportOptions contains the optional parameters for the EvidencesClient.NewListByReportPager
//     method.
func (client *EvidencesClient) NewListByReportPager(reportName string, options *EvidencesClientListByReportOptions) *runtime.Pager[EvidencesClientListByReportResponse] {
	return runtime.NewPager(runtime.PagingHandler[EvidencesClientListByReportResponse]{
		More: func(page EvidencesClientListByReportResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EvidencesClientListByReportResponse) (EvidencesClientListByReportResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EvidencesClient.NewListByReportPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByReportCreateRequest(ctx, reportName, options)
			}, nil)
			if err != nil {
				return EvidencesClientListByReportResponse{}, err
			}
			return client.listByReportHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByReportCreateRequest creates the ListByReport request.
func (client *EvidencesClient) listByReportCreateRequest(ctx context.Context, reportName string, options *EvidencesClientListByReportOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("$orderby", *options.Orderby)
	}
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-06-27")
	if options != nil && options.OfferGUID != nil {
		reqQP.Set("offerGuid", *options.OfferGUID)
	}
	if options != nil && options.ReportCreatorTenantID != nil {
		reqQP.Set("reportCreatorTenantId", *options.ReportCreatorTenantID)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByReportHandleResponse handles the ListByReport response.
func (client *EvidencesClient) listByReportHandleResponse(resp *http.Response) (EvidencesClientListByReportResponse, error) {
	result := EvidencesClientListByReportResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EvidenceResourceListResult); err != nil {
		return EvidencesClientListByReportResponse{}, err
	}
	return result, nil
}
