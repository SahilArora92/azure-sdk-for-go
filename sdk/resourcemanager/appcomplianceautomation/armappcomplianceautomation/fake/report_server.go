//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcomplianceautomation/armappcomplianceautomation"
	"net/http"
	"net/url"
	"regexp"
)

// ReportServer is a fake server for instances of the armappcomplianceautomation.ReportClient type.
type ReportServer struct {
	// BeginVerify is the fake for method ReportClient.BeginVerify
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginVerify func(ctx context.Context, reportName string, options *armappcomplianceautomation.ReportClientBeginVerifyOptions) (resp azfake.PollerResponder[armappcomplianceautomation.ReportClientVerifyResponse], errResp azfake.ErrorResponder)
}

// NewReportServerTransport creates a new instance of ReportServerTransport with the provided implementation.
// The returned ReportServerTransport instance is connected to an instance of armappcomplianceautomation.ReportClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewReportServerTransport(srv *ReportServer) *ReportServerTransport {
	return &ReportServerTransport{
		srv:         srv,
		beginVerify: newTracker[azfake.PollerResponder[armappcomplianceautomation.ReportClientVerifyResponse]](),
	}
}

// ReportServerTransport connects instances of armappcomplianceautomation.ReportClient to instances of ReportServer.
// Don't use this type directly, use NewReportServerTransport instead.
type ReportServerTransport struct {
	srv         *ReportServer
	beginVerify *tracker[azfake.PollerResponder[armappcomplianceautomation.ReportClientVerifyResponse]]
}

// Do implements the policy.Transporter interface for ReportServerTransport.
func (r *ReportServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ReportClient.BeginVerify":
		resp, err = r.dispatchBeginVerify(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (r *ReportServerTransport) dispatchBeginVerify(req *http.Request) (*http.Response, error) {
	if r.srv.BeginVerify == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginVerify not implemented")}
	}
	beginVerify := r.beginVerify.get(req)
	if beginVerify == nil {
		const regexStr = `/providers/Microsoft\.AppComplianceAutomation/reports/(?P<reportName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/verify`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		reportNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := r.srv.BeginVerify(req.Context(), reportNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginVerify = &respr
		r.beginVerify.add(req, beginVerify)
	}

	resp, err := server.PollerResponderNext(beginVerify, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		r.beginVerify.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginVerify) {
		r.beginVerify.remove(req)
	}

	return resp, nil
}
