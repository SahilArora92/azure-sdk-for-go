//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcomplianceautomation/armappcomplianceautomation"
	"net/http"
	"net/url"
	"regexp"
)

// ToolForMicrosoft365Server is a fake server for instances of the armappcomplianceautomation.ToolForMicrosoft365Client type.
type ToolForMicrosoft365Server struct {
	// GetScopingQuestions is the fake for method ToolForMicrosoft365Client.GetScopingQuestions
	// HTTP status codes to indicate success: http.StatusOK
	GetScopingQuestions func(ctx context.Context, reportName string, options *armappcomplianceautomation.ToolForMicrosoft365ClientGetScopingQuestionsOptions) (resp azfake.Responder[armappcomplianceautomation.ToolForMicrosoft365ClientGetScopingQuestionsResponse], errResp azfake.ErrorResponder)
}

// NewToolForMicrosoft365ServerTransport creates a new instance of ToolForMicrosoft365ServerTransport with the provided implementation.
// The returned ToolForMicrosoft365ServerTransport instance is connected to an instance of armappcomplianceautomation.ToolForMicrosoft365Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewToolForMicrosoft365ServerTransport(srv *ToolForMicrosoft365Server) *ToolForMicrosoft365ServerTransport {
	return &ToolForMicrosoft365ServerTransport{srv: srv}
}

// ToolForMicrosoft365ServerTransport connects instances of armappcomplianceautomation.ToolForMicrosoft365Client to instances of ToolForMicrosoft365Server.
// Don't use this type directly, use NewToolForMicrosoft365ServerTransport instead.
type ToolForMicrosoft365ServerTransport struct {
	srv *ToolForMicrosoft365Server
}

// Do implements the policy.Transporter interface for ToolForMicrosoft365ServerTransport.
func (t *ToolForMicrosoft365ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ToolForMicrosoft365Client.GetScopingQuestions":
		resp, err = t.dispatchGetScopingQuestions(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (t *ToolForMicrosoft365ServerTransport) dispatchGetScopingQuestions(req *http.Request) (*http.Response, error) {
	if t.srv.GetScopingQuestions == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetScopingQuestions not implemented")}
	}
	const regexStr = `/providers/Microsoft\.AppComplianceAutomation/reports/(?P<reportName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getScopingQuestions`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	reportNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("reportName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := t.srv.GetScopingQuestions(req.Context(), reportNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ScopingQuestions, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
