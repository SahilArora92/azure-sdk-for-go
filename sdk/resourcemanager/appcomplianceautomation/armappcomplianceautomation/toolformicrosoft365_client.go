//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcomplianceautomation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ToolForMicrosoft365Client contains the methods for the AppComplianceAutomationToolForMicrosoft365 group.
// Don't use this type directly, use NewToolForMicrosoft365Client() instead.
type ToolForMicrosoft365Client struct {
	internal *arm.Client
}

// NewToolForMicrosoft365Client creates a new instance of ToolForMicrosoft365Client with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewToolForMicrosoft365Client(credential azcore.TokenCredential, options *arm.ClientOptions) (*ToolForMicrosoft365Client, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ToolForMicrosoft365Client{
		internal: cl,
	}
	return client, nil
}

// GetScopingQuestions - Fix the AppComplianceAutomation report error. e.g: App Compliance Automation Tool service unregistered,
// automation removed.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - options - ToolForMicrosoft365ClientGetScopingQuestionsOptions contains the optional parameters for the ToolForMicrosoft365Client.GetScopingQuestions
//     method.
func (client *ToolForMicrosoft365Client) GetScopingQuestions(ctx context.Context, reportName string, options *ToolForMicrosoft365ClientGetScopingQuestionsOptions) (ToolForMicrosoft365ClientGetScopingQuestionsResponse, error) {
	var err error
	const operationName = "ToolForMicrosoft365Client.GetScopingQuestions"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getScopingQuestionsCreateRequest(ctx, reportName, options)
	if err != nil {
		return ToolForMicrosoft365ClientGetScopingQuestionsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ToolForMicrosoft365ClientGetScopingQuestionsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ToolForMicrosoft365ClientGetScopingQuestionsResponse{}, err
	}
	resp, err := client.getScopingQuestionsHandleResponse(httpResp)
	return resp, err
}

// getScopingQuestionsCreateRequest creates the GetScopingQuestions request.
func (client *ToolForMicrosoft365Client) getScopingQuestionsCreateRequest(ctx context.Context, reportName string, options *ToolForMicrosoft365ClientGetScopingQuestionsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/getScopingQuestions"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getScopingQuestionsHandleResponse handles the GetScopingQuestions response.
func (client *ToolForMicrosoft365Client) getScopingQuestionsHandleResponse(resp *http.Response) (ToolForMicrosoft365ClientGetScopingQuestionsResponse, error) {
	result := ToolForMicrosoft365ClientGetScopingQuestionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScopingQuestions); err != nil {
		return ToolForMicrosoft365ClientGetScopingQuestionsResponse{}, err
	}
	return result, nil
}
