//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappcomplianceautomation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ScopingConfigurationsClient contains the methods for the ScopingConfigurations group.
// Don't use this type directly, use NewScopingConfigurationsClient() instead.
type ScopingConfigurationsClient struct {
	internal *arm.Client
}

// NewScopingConfigurationsClient creates a new instance of ScopingConfigurationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewScopingConfigurationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ScopingConfigurationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ScopingConfigurationsClient{
		internal: cl,
	}
	return client, nil
}

// NewListPager - Returns a list format of the singleton scopingConfiguration for a specified report.
//
// Generated from API version 2024-06-27
//   - reportName - Report Name.
//   - options - ScopingConfigurationsClientListOptions contains the optional parameters for the ScopingConfigurationsClient.NewListPager
//     method.
func (client *ScopingConfigurationsClient) NewListPager(reportName string, options *ScopingConfigurationsClientListOptions) *runtime.Pager[ScopingConfigurationsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ScopingConfigurationsClientListResponse]{
		More: func(page ScopingConfigurationsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ScopingConfigurationsClientListResponse) (ScopingConfigurationsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ScopingConfigurationsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, reportName, options)
			}, nil)
			if err != nil {
				return ScopingConfigurationsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *ScopingConfigurationsClient) listCreateRequest(ctx context.Context, reportName string, options *ScopingConfigurationsClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations"
	if reportName == "" {
		return nil, errors.New("parameter reportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reportName}", url.PathEscape(reportName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-27")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ScopingConfigurationsClient) listHandleResponse(resp *http.Response) (ScopingConfigurationsClientListResponse, error) {
	result := ScopingConfigurationsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScopingConfigurationResourceListResult); err != nil {
		return ScopingConfigurationsClientListResponse{}, err
	}
	return result, nil
}
