//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscom

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient struct {
	internal *arm.Client
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOperationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*OperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OperationsClient{
		internal: cl,
	}
	return client, nil
}

// NewListV2Pager - Lists all available operations on SCOM managed instance (SCOM MI)
//
// Generated from API version 2023-10-30
//   - options - OperationsClientListV2Options contains the optional parameters for the OperationsClient.NewListV2Pager method.
func (client *OperationsClient) NewListV2Pager(options *OperationsClientListV2Options) *runtime.Pager[OperationsClientListV2Response] {
	return runtime.NewPager(runtime.PagingHandler[OperationsClientListV2Response]{
		More: func(page OperationsClientListV2Response) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OperationsClientListV2Response) (OperationsClientListV2Response, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "OperationsClient.NewListV2Pager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listV2CreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return OperationsClientListV2Response{}, err
			}
			return client.listV2HandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listV2CreateRequest creates the ListV2 request.
func (client *OperationsClient) listV2CreateRequest(ctx context.Context, options *OperationsClientListV2Options) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Scom/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listV2HandleResponse handles the ListV2 response.
func (client *OperationsClient) listV2HandleResponse(resp *http.Response) (OperationsClientListV2Response, error) {
	result := OperationsClientListV2Response{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationListResult); err != nil {
		return OperationsClientListV2Response{}, err
	}
	return result, nil
}
