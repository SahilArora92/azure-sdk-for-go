//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscom

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scom/armscom"
	moduleVersion = "v1.0.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AutoUpgrade - Update type of filtered resource.
type AutoUpgrade string

const (
	AutoUpgradeDisabled AutoUpgrade = "Disabled"
	AutoUpgradeEnabled  AutoUpgrade = "Enabled"
)

// PossibleAutoUpgradeValues returns the possible values for the AutoUpgrade const type.
func PossibleAutoUpgradeValues() []AutoUpgrade {
	return []AutoUpgrade{
		AutoUpgradeDisabled,
		AutoUpgradeEnabled,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

type DataType string

const (
	DataTypeAudit       DataType = "Audit"
	DataTypeEvent       DataType = "Event"
	DataTypePerformance DataType = "Performance"
	DataTypeState       DataType = "State"
)

// PossibleDataTypeValues returns the possible values for the DataType const type.
func PossibleDataTypeValues() []DataType {
	return []DataType{
		DataTypeAudit,
		DataTypeEvent,
		DataTypePerformance,
		DataTypeState,
	}
}

// HybridLicenseType - The license type associated with different SCOM infrastructure components.
type HybridLicenseType string

const (
	HybridLicenseTypeAzureHybridBenefit HybridLicenseType = "AzureHybridBenefit"
	HybridLicenseTypeNone               HybridLicenseType = "None"
)

// PossibleHybridLicenseTypeValues returns the possible values for the HybridLicenseType const type.
func PossibleHybridLicenseTypeValues() []HybridLicenseType {
	return []HybridLicenseType{
		HybridLicenseTypeAzureHybridBenefit,
		HybridLicenseTypeNone,
	}
}

// InstallType - Install type of monitored resource.
type InstallType string

const (
	InstallTypeInvalid   InstallType = "Invalid"
	InstallTypeManual    InstallType = "Manual"
	InstallTypePush      InstallType = "Push"
	InstallTypeRPManaged InstallType = "RPManaged"
)

// PossibleInstallTypeValues returns the possible values for the InstallType const type.
func PossibleInstallTypeValues() []InstallType {
	return []InstallType{
		InstallTypeInvalid,
		InstallTypeManual,
		InstallTypePush,
		InstallTypeRPManaged,
	}
}

// MachineType - machineType of filtered resource.
type MachineType string

const (
	MachineTypeAzureArcMachine     MachineType = "Azure Arc Machine"
	MachineTypeAzureVirtualMachine MachineType = "Azure Virtual Machine"
	MachineTypeOnPremiseMachine    MachineType = "On-premise Machine"
)

// PossibleMachineTypeValues returns the possible values for the MachineType const type.
func PossibleMachineTypeValues() []MachineType {
	return []MachineType{
		MachineTypeAzureArcMachine,
		MachineTypeAzureVirtualMachine,
		MachineTypeOnPremiseMachine,
	}
}

// ManagedIdentityType - The identity type
type ManagedIdentityType string

const (
	ManagedIdentityTypeNone                       ManagedIdentityType = "None"
	ManagedIdentityTypeSystemAssigned             ManagedIdentityType = "SystemAssigned"
	ManagedIdentityTypeSystemAssignedUserAssigned ManagedIdentityType = "SystemAssigned,UserAssigned"
	ManagedIdentityTypeUserAssigned               ManagedIdentityType = "UserAssigned"
)

// PossibleManagedIdentityTypeValues returns the possible values for the ManagedIdentityType const type.
func PossibleManagedIdentityTypeValues() []ManagedIdentityType {
	return []ManagedIdentityType{
		ManagedIdentityTypeNone,
		ManagedIdentityTypeSystemAssigned,
		ManagedIdentityTypeSystemAssignedUserAssigned,
		ManagedIdentityTypeUserAssigned,
	}
}

// OnboardingStatusValues - The status of the onboarding process.
type OnboardingStatusValues string

const (
	OnboardingStatusValuesFailed    OnboardingStatusValues = "Failed"
	OnboardingStatusValuesSucceeded OnboardingStatusValues = "Succeeded"
)

// PossibleOnboardingStatusValuesValues returns the possible values for the OnboardingStatusValues const type.
func PossibleOnboardingStatusValuesValues() []OnboardingStatusValues {
	return []OnboardingStatusValues{
		OnboardingStatusValuesFailed,
		OnboardingStatusValuesSucceeded,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ProvisioningState - Gets the provisioning state.
type ProvisioningState string

const (
	ProvisioningStateCanceled                      ProvisioningState = "Canceled"
	ProvisioningStateCreating                      ProvisioningState = "Creating"
	ProvisioningStateFailed                        ProvisioningState = "Failed"
	ProvisioningStateGatewayOnboard                ProvisioningState = "GatewayOnboard"
	ProvisioningStateLinkingOrUpdatingLogAnalytics ProvisioningState = "LinkingOrUpdatingLogAnalytics"
	ProvisioningStateScaling                       ProvisioningState = "Scaling"
	ProvisioningStateSucceeded                     ProvisioningState = "Succeeded"
	ProvisioningStateUnlinkingLogAnalytics         ProvisioningState = "UnlinkingLogAnalytics"
	ProvisioningStateUpdating                      ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateCreating,
		ProvisioningStateFailed,
		ProvisioningStateGatewayOnboard,
		ProvisioningStateLinkingOrUpdatingLogAnalytics,
		ProvisioningStateScaling,
		ProvisioningStateSucceeded,
		ProvisioningStateUnlinkingLogAnalytics,
		ProvisioningStateUpdating,
	}
}

// Status - Status of the gateway onboard operation.
type Status string

const (
	StatusCompleted Status = "Completed"
	StatusFailed    Status = "Failed"
	StatusProgress  Status = "Progress"
	StatusStarted   Status = "Started"
	StatusSucceeded Status = "Succeeded"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusCompleted,
		StatusFailed,
		StatusProgress,
		StatusStarted,
		StatusSucceeded,
	}
}
