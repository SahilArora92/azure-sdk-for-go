//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scom/armscom"
	"net/http"
	"net/url"
	"regexp"
)

// OffboardServer is a fake server for instances of the armscom.OffboardClient type.
type OffboardServer struct {
	// BeginGateway is the fake for method OffboardClient.BeginGateway
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGateway func(ctx context.Context, resourceGroupName string, instanceName string, body armscom.GatewayOnboardingProperties, options *armscom.OffboardClientBeginGatewayOptions) (resp azfake.PollerResponder[armscom.OffboardClientGatewayResponse], errResp azfake.ErrorResponder)

	// BeginMonitoredResource is the fake for method OffboardClient.BeginMonitoredResource
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginMonitoredResource func(ctx context.Context, resourceGroupName string, instanceName string, body armscom.MonitoredResourceOffboardingProperties, options *armscom.OffboardClientBeginMonitoredResourceOptions) (resp azfake.PollerResponder[armscom.OffboardClientMonitoredResourceResponse], errResp azfake.ErrorResponder)
}

// NewOffboardServerTransport creates a new instance of OffboardServerTransport with the provided implementation.
// The returned OffboardServerTransport instance is connected to an instance of armscom.OffboardClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOffboardServerTransport(srv *OffboardServer) *OffboardServerTransport {
	return &OffboardServerTransport{
		srv:                    srv,
		beginGateway:           newTracker[azfake.PollerResponder[armscom.OffboardClientGatewayResponse]](),
		beginMonitoredResource: newTracker[azfake.PollerResponder[armscom.OffboardClientMonitoredResourceResponse]](),
	}
}

// OffboardServerTransport connects instances of armscom.OffboardClient to instances of OffboardServer.
// Don't use this type directly, use NewOffboardServerTransport instead.
type OffboardServerTransport struct {
	srv                    *OffboardServer
	beginGateway           *tracker[azfake.PollerResponder[armscom.OffboardClientGatewayResponse]]
	beginMonitoredResource *tracker[azfake.PollerResponder[armscom.OffboardClientMonitoredResourceResponse]]
}

// Do implements the policy.Transporter interface for OffboardServerTransport.
func (o *OffboardServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "OffboardClient.BeginGateway":
		resp, err = o.dispatchBeginGateway(req)
	case "OffboardClient.BeginMonitoredResource":
		resp, err = o.dispatchBeginMonitoredResource(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (o *OffboardServerTransport) dispatchBeginGateway(req *http.Request) (*http.Response, error) {
	if o.srv.BeginGateway == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGateway not implemented")}
	}
	beginGateway := o.beginGateway.get(req)
	if beginGateway == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/offboardGateway`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.GatewayOnboardingProperties](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := o.srv.BeginGateway(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGateway = &respr
		o.beginGateway.add(req, beginGateway)
	}

	resp, err := server.PollerResponderNext(beginGateway, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		o.beginGateway.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGateway) {
		o.beginGateway.remove(req)
	}

	return resp, nil
}

func (o *OffboardServerTransport) dispatchBeginMonitoredResource(req *http.Request) (*http.Response, error) {
	if o.srv.BeginMonitoredResource == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginMonitoredResource not implemented")}
	}
	beginMonitoredResource := o.beginMonitoredResource.get(req)
	if beginMonitoredResource == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Scom/managedInstances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/offboardMonitoredResource`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armscom.MonitoredResourceOffboardingProperties](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := o.srv.BeginMonitoredResource(req.Context(), resourceGroupNameParam, instanceNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginMonitoredResource = &respr
		o.beginMonitoredResource.add(req, beginMonitoredResource)
	}

	resp, err := server.PollerResponderNext(beginMonitoredResource, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		o.beginMonitoredResource.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginMonitoredResource) {
		o.beginMonitoredResource.remove(req)
	}

	return resp, nil
}
