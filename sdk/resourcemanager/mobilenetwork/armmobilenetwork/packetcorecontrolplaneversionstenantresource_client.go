//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmobilenetwork

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PacketCoreControlPlaneVersionsTenantResourceClient contains the methods for the PacketCoreControlPlaneVersionsTenantResource group.
// Don't use this type directly, use NewPacketCoreControlPlaneVersionsTenantResourceClient() instead.
type PacketCoreControlPlaneVersionsTenantResourceClient struct {
	internal *arm.Client
}

// NewPacketCoreControlPlaneVersionsTenantResourceClient creates a new instance of PacketCoreControlPlaneVersionsTenantResourceClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPacketCoreControlPlaneVersionsTenantResourceClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*PacketCoreControlPlaneVersionsTenantResourceClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PacketCoreControlPlaneVersionsTenantResourceClient{
		internal: cl,
	}
	return client, nil
}

// Get - Gets information about the specified packet core control plane version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - versionName - The name of the packet core control plane version.
//   - options - PacketCoreControlPlaneVersionsTenantResourceClientGetOptions contains the optional parameters for the PacketCoreControlPlaneVersionsTenantResourceClient.Get
//     method.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) Get(ctx context.Context, versionName string, options *PacketCoreControlPlaneVersionsTenantResourceClientGetOptions) (PacketCoreControlPlaneVersionsTenantResourceClientGetResponse, error) {
	var err error
	const operationName = "PacketCoreControlPlaneVersionsTenantResourceClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, versionName, options)
	if err != nil {
		return PacketCoreControlPlaneVersionsTenantResourceClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PacketCoreControlPlaneVersionsTenantResourceClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PacketCoreControlPlaneVersionsTenantResourceClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) getCreateRequest(ctx context.Context, versionName string, options *PacketCoreControlPlaneVersionsTenantResourceClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}"
	if versionName == "" {
		return nil, errors.New("parameter versionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionName}", url.PathEscape(versionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) getHandleResponse(resp *http.Response) (PacketCoreControlPlaneVersionsTenantResourceClientGetResponse, error) {
	result := PacketCoreControlPlaneVersionsTenantResourceClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PacketCoreControlPlaneVersion); err != nil {
		return PacketCoreControlPlaneVersionsTenantResourceClientGetResponse{}, err
	}
	return result, nil
}

// NewListByTenantPager - Lists all supported packet core control planes versions.
//
// Generated from API version 2024-06-01
//   - options - PacketCoreControlPlaneVersionsTenantResourceClientListByTenantOptions contains the optional parameters for the
//     PacketCoreControlPlaneVersionsTenantResourceClient.NewListByTenantPager method.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) NewListByTenantPager(options *PacketCoreControlPlaneVersionsTenantResourceClientListByTenantOptions) *runtime.Pager[PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse] {
	return runtime.NewPager(runtime.PagingHandler[PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse]{
		More: func(page PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse) (PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PacketCoreControlPlaneVersionsTenantResourceClient.NewListByTenantPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByTenantCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse{}, err
			}
			return client.listByTenantHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByTenantCreateRequest creates the ListByTenant request.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) listByTenantCreateRequest(ctx context.Context, options *PacketCoreControlPlaneVersionsTenantResourceClientListByTenantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByTenantHandleResponse handles the ListByTenant response.
func (client *PacketCoreControlPlaneVersionsTenantResourceClient) listByTenantHandleResponse(resp *http.Response) (PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse, error) {
	result := PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PacketCoreControlPlaneVersionListResult); err != nil {
		return PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse{}, err
	}
	return result, nil
}
