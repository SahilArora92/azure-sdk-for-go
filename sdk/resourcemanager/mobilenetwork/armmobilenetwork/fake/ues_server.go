//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mobilenetwork/armmobilenetwork/v5"
	"net/http"
	"net/url"
	"regexp"
)

// UesServer is a fake server for instances of the armmobilenetwork.UesClient type.
type UesServer struct {
	// NewListByPacketCoreControlPlanePager is the fake for method UesClient.NewListByPacketCoreControlPlanePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByPacketCoreControlPlanePager func(resourceGroupName string, packetCoreControlPlaneName string, options *armmobilenetwork.UesClientListByPacketCoreControlPlaneOptions) (resp azfake.PagerResponder[armmobilenetwork.UesClientListByPacketCoreControlPlaneResponse])
}

// NewUesServerTransport creates a new instance of UesServerTransport with the provided implementation.
// The returned UesServerTransport instance is connected to an instance of armmobilenetwork.UesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUesServerTransport(srv *UesServer) *UesServerTransport {
	return &UesServerTransport{
		srv:                                  srv,
		newListByPacketCoreControlPlanePager: newTracker[azfake.PagerResponder[armmobilenetwork.UesClientListByPacketCoreControlPlaneResponse]](),
	}
}

// UesServerTransport connects instances of armmobilenetwork.UesClient to instances of UesServer.
// Don't use this type directly, use NewUesServerTransport instead.
type UesServerTransport struct {
	srv                                  *UesServer
	newListByPacketCoreControlPlanePager *tracker[azfake.PagerResponder[armmobilenetwork.UesClientListByPacketCoreControlPlaneResponse]]
}

// Do implements the policy.Transporter interface for UesServerTransport.
func (u *UesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "UesClient.NewListByPacketCoreControlPlanePager":
		resp, err = u.dispatchNewListByPacketCoreControlPlanePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (u *UesServerTransport) dispatchNewListByPacketCoreControlPlanePager(req *http.Request) (*http.Response, error) {
	if u.srv.NewListByPacketCoreControlPlanePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByPacketCoreControlPlanePager not implemented")}
	}
	newListByPacketCoreControlPlanePager := u.newListByPacketCoreControlPlanePager.get(req)
	if newListByPacketCoreControlPlanePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MobileNetwork/packetCoreControlPlanes/(?P<packetCoreControlPlaneName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/ues`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		packetCoreControlPlaneNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("packetCoreControlPlaneName")])
		if err != nil {
			return nil, err
		}
		resp := u.srv.NewListByPacketCoreControlPlanePager(resourceGroupNameParam, packetCoreControlPlaneNameParam, nil)
		newListByPacketCoreControlPlanePager = &resp
		u.newListByPacketCoreControlPlanePager.add(req, newListByPacketCoreControlPlanePager)
		server.PagerResponderInjectNextLinks(newListByPacketCoreControlPlanePager, req, func(page *armmobilenetwork.UesClientListByPacketCoreControlPlaneResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByPacketCoreControlPlanePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		u.newListByPacketCoreControlPlanePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByPacketCoreControlPlanePager) {
		u.newListByPacketCoreControlPlanePager.remove(req)
	}
	return resp, nil
}
