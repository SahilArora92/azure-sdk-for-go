//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mobilenetwork/armmobilenetwork/v5"
	"net/http"
	"net/url"
	"regexp"
)

// PacketCoreControlPlaneVersionsTenantResourceServer is a fake server for instances of the armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClient type.
type PacketCoreControlPlaneVersionsTenantResourceServer struct {
	// Get is the fake for method PacketCoreControlPlaneVersionsTenantResourceClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, versionName string, options *armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientGetOptions) (resp azfake.Responder[armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByTenantPager is the fake for method PacketCoreControlPlaneVersionsTenantResourceClient.NewListByTenantPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByTenantPager func(options *armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientListByTenantOptions) (resp azfake.PagerResponder[armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse])
}

// NewPacketCoreControlPlaneVersionsTenantResourceServerTransport creates a new instance of PacketCoreControlPlaneVersionsTenantResourceServerTransport with the provided implementation.
// The returned PacketCoreControlPlaneVersionsTenantResourceServerTransport instance is connected to an instance of armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewPacketCoreControlPlaneVersionsTenantResourceServerTransport(srv *PacketCoreControlPlaneVersionsTenantResourceServer) *PacketCoreControlPlaneVersionsTenantResourceServerTransport {
	return &PacketCoreControlPlaneVersionsTenantResourceServerTransport{
		srv:                  srv,
		newListByTenantPager: newTracker[azfake.PagerResponder[armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse]](),
	}
}

// PacketCoreControlPlaneVersionsTenantResourceServerTransport connects instances of armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClient to instances of PacketCoreControlPlaneVersionsTenantResourceServer.
// Don't use this type directly, use NewPacketCoreControlPlaneVersionsTenantResourceServerTransport instead.
type PacketCoreControlPlaneVersionsTenantResourceServerTransport struct {
	srv                  *PacketCoreControlPlaneVersionsTenantResourceServer
	newListByTenantPager *tracker[azfake.PagerResponder[armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse]]
}

// Do implements the policy.Transporter interface for PacketCoreControlPlaneVersionsTenantResourceServerTransport.
func (p *PacketCoreControlPlaneVersionsTenantResourceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "PacketCoreControlPlaneVersionsTenantResourceClient.Get":
		resp, err = p.dispatchGet(req)
	case "PacketCoreControlPlaneVersionsTenantResourceClient.NewListByTenantPager":
		resp, err = p.dispatchNewListByTenantPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (p *PacketCoreControlPlaneVersionsTenantResourceServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if p.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/providers/Microsoft\.MobileNetwork/packetCoreControlPlaneVersions/(?P<versionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	versionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("versionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := p.srv.Get(req.Context(), versionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PacketCoreControlPlaneVersion, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (p *PacketCoreControlPlaneVersionsTenantResourceServerTransport) dispatchNewListByTenantPager(req *http.Request) (*http.Response, error) {
	if p.srv.NewListByTenantPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByTenantPager not implemented")}
	}
	newListByTenantPager := p.newListByTenantPager.get(req)
	if newListByTenantPager == nil {
		resp := p.srv.NewListByTenantPager(nil)
		newListByTenantPager = &resp
		p.newListByTenantPager.add(req, newListByTenantPager)
		server.PagerResponderInjectNextLinks(newListByTenantPager, req, func(page *armmobilenetwork.PacketCoreControlPlaneVersionsTenantResourceClientListByTenantResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByTenantPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		p.newListByTenantPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByTenantPager) {
		p.newListByTenantPager.remove(req)
	}
	return resp, nil
}
