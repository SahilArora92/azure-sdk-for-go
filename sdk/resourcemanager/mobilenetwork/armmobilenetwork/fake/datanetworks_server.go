//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mobilenetwork/armmobilenetwork/v5"
	"net/http"
	"net/url"
	"regexp"
)

// DataNetworksServer is a fake server for instances of the armmobilenetwork.DataNetworksClient type.
type DataNetworksServer struct {
	// NewListByMobileNetworkPager is the fake for method DataNetworksClient.NewListByMobileNetworkPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByMobileNetworkPager func(resourceGroupName string, mobileNetworkName string, options *armmobilenetwork.DataNetworksClientListByMobileNetworkOptions) (resp azfake.PagerResponder[armmobilenetwork.DataNetworksClientListByMobileNetworkResponse])
}

// NewDataNetworksServerTransport creates a new instance of DataNetworksServerTransport with the provided implementation.
// The returned DataNetworksServerTransport instance is connected to an instance of armmobilenetwork.DataNetworksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDataNetworksServerTransport(srv *DataNetworksServer) *DataNetworksServerTransport {
	return &DataNetworksServerTransport{
		srv:                         srv,
		newListByMobileNetworkPager: newTracker[azfake.PagerResponder[armmobilenetwork.DataNetworksClientListByMobileNetworkResponse]](),
	}
}

// DataNetworksServerTransport connects instances of armmobilenetwork.DataNetworksClient to instances of DataNetworksServer.
// Don't use this type directly, use NewDataNetworksServerTransport instead.
type DataNetworksServerTransport struct {
	srv                         *DataNetworksServer
	newListByMobileNetworkPager *tracker[azfake.PagerResponder[armmobilenetwork.DataNetworksClientListByMobileNetworkResponse]]
}

// Do implements the policy.Transporter interface for DataNetworksServerTransport.
func (d *DataNetworksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DataNetworksClient.NewListByMobileNetworkPager":
		resp, err = d.dispatchNewListByMobileNetworkPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DataNetworksServerTransport) dispatchNewListByMobileNetworkPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByMobileNetworkPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByMobileNetworkPager not implemented")}
	}
	newListByMobileNetworkPager := d.newListByMobileNetworkPager.get(req)
	if newListByMobileNetworkPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MobileNetwork/mobileNetworks/(?P<mobileNetworkName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dataNetworks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		mobileNetworkNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mobileNetworkName")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListByMobileNetworkPager(resourceGroupNameParam, mobileNetworkNameParam, nil)
		newListByMobileNetworkPager = &resp
		d.newListByMobileNetworkPager.add(req, newListByMobileNetworkPager)
		server.PagerResponderInjectNextLinks(newListByMobileNetworkPager, req, func(page *armmobilenetwork.DataNetworksClientListByMobileNetworkResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByMobileNetworkPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByMobileNetworkPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByMobileNetworkPager) {
		d.newListByMobileNetworkPager.remove(req)
	}
	return resp, nil
}
