//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcomputefleet_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestOperations_List() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	client, err := armcomputefleet.NewOperationsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Operations_List.json")
		// Response check
		pagerExampleRes := armcomputefleet.OperationListResult{
			Value: []*armcomputefleet.Operation{
				{
					Name: to.Ptr("Microsoft.AzureFleet/fleets/read"),
					Display: &armcomputefleet.OperationDisplay{
						Description: to.Ptr("Get properties of Azure Fleet resource"),
						Operation:   to.Ptr("Get Azure Fleet"),
						Provider:    to.Ptr("Microsoft Azure Fleet"),
						Resource:    to.Ptr("Fleets"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armcomputefleet.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.AzureFleet/fleets/write"),
					Display: &armcomputefleet.OperationDisplay{
						Description: to.Ptr("Creates a new Azure Fleet resource or updates an existing one"),
						Operation:   to.Ptr("Create or Update Azure Fleet"),
						Provider:    to.Ptr("Microsoft Azure Fleet"),
						Resource:    to.Ptr("Fleets"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armcomputefleet.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.AzureFleet/fleets/delete"),
					Display: &armcomputefleet.OperationDisplay{
						Description: to.Ptr("Deletes all compute resources of Azure Fleet resource"),
						Operation:   to.Ptr("Delete Virtual Machine and Virtual Machine scale sets in a Azure Fleet resource"),
						Provider:    to.Ptr("Microsoft Azure Fleet"),
						Resource:    to.Ptr("Fleets"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armcomputefleet.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.AzureFleet/register/action"),
					Display: &armcomputefleet.OperationDisplay{
						Description: to.Ptr("Registers Subscription with Microsoft.AzureFleet resource provider"),
						Operation:   to.Ptr("Register subscription for Microsoft.AzureFleet"),
						Provider:    to.Ptr("Microsoft Azure Fleet"),
						Resource:    to.Ptr("Subscription"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armcomputefleet.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.AzureFleet/unregister/action"),
					Display: &armcomputefleet.OperationDisplay{
						Description: to.Ptr("Unregisters Subscription with Microsoft.AzureFleet resource provider"),
						Operation:   to.Ptr("Unregister Subscription for Microsoft.AzureFleet"),
						Provider:    to.Ptr("Microsoft Azure Fleet"),
						Resource:    to.Ptr("Subscription"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armcomputefleet.OriginUserSystem),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFleets_ListBySubscription() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_ListBySubscription"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListBySubscription.json")
		// Response check
		pagerExampleRes := armcomputefleet.FleetListResult{
			Value: []*armcomputefleet.Fleet{
				{
					Name: to.Ptr("testFleet"),
					Type: to.Ptr("Microsoft.AzureFleet/fleets"),
					ID:   to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
					SystemData: &armcomputefleet.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
						CreatedBy:          to.Ptr("rowegentrpoajsv"),
						CreatedByType:      to.Ptr(armcomputefleet.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
						LastModifiedBy:     to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
						LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
					},
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
					},
					Identity: &armcomputefleet.ManagedServiceIdentity{
						Type:        to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
						PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
						TenantID:    to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
						UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
							"key9851": &armcomputefleet.UserAssignedIdentity{
								ClientID:    to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
								PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
							},
						},
					},
					Properties: &armcomputefleet.FleetProperties{
						ComputeProfile: &armcomputefleet.ComputeProfile{
							BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
								ApplicationProfile: &armcomputefleet.ApplicationProfile{
									GalleryApplications: []*armcomputefleet.VMGalleryApplication{
										{
											ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
											EnableAutomaticUpgrade:          to.Ptr(true),
											Order:                           to.Ptr[int32](5),
											PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
											Tags:                            to.Ptr("eyrqjbib"),
											TreatFailureAsDeploymentFailure: to.Ptr(true),
										}},
								},
								CapacityReservation: &armcomputefleet.CapacityReservationProfile{
									CapacityReservationGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
								},
								DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
									BootDiagnostics: &armcomputefleet.BootDiagnostics{
										Enabled:    to.Ptr(true),
										StorageURI: to.Ptr("rzamfwghybpx"),
									},
								},
								ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
									ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
									Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
										{
											ID:   to.Ptr("fmheufuaqonfvirwrpd"),
											Name: to.Ptr("bndxuxx"),
											Type: to.Ptr("cmeam"),
											Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
												Type:                    to.Ptr("pgjilctjjwaa"),
												AutoUpgradeMinorVersion: to.Ptr(true),
												EnableAutomaticUpgrade:  to.Ptr(true),
												ForceUpdateTag:          to.Ptr("yhgxw"),
												ProtectedSettings:       map[string]any{},
												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
													SourceVault: &armcomputefleet.SubResource{
														ID: to.Ptr("groxwd"),
													},
												},
												ProvisionAfterExtensions: []*string{
													to.Ptr("nftzosroolbcwmpupujzqwqe")},
												ProvisioningState:  to.Ptr("Succeeded"),
												Publisher:          to.Ptr("kpxtirxjfprhs"),
												Settings:           map[string]any{},
												SuppressFailures:   to.Ptr(true),
												TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
											},
										}},
								},
								HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
									VMSizeProperties: &armcomputefleet.VMSizeProperties{
										VCPUsAvailable: to.Ptr[int32](16),
										VCPUsPerCore:   to.Ptr[int32](23),
									},
								},
								LicenseType: to.Ptr("v"),
								NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
									HealthProbe: &armcomputefleet.APIEntityReference{
										ID: to.Ptr("cmkfcjhmrwxwqtac"),
									},
									NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
									NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
										{
											Name: to.Ptr("i"),
											Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
												AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
												AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
												DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
												DisableTCPStateTracking: to.Ptr(true),
												DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
													DNSServers: []*string{
														to.Ptr("nxmmfolhclsesu")},
												},
												EnableAcceleratedNetworking: to.Ptr(true),
												EnableFpga:                  to.Ptr(true),
												EnableIPForwarding:          to.Ptr(true),
												IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
													{
														Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
														Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
															ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															ApplicationSecurityGroups: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															Primary:                 to.Ptr(true),
															PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
															PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
																Name: to.Ptr("fvpqf"),
																Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
																	DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
																	DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																		DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
																		DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
																	},
																	IdleTimeoutInMinutes: to.Ptr[int32](9),
																	IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
																		{
																			IPTagType: to.Ptr("sddgsoemnzgqizale"),
																			Tag:       to.Ptr("wufmhrjsakbiaetyara"),
																		}},
																	PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
																	PublicIPPrefix: &armcomputefleet.SubResource{
																		ID: to.Ptr("groxwd"),
																	},
																},
																SKU: &armcomputefleet.PublicIPAddressSKU{
																	Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
																	Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
																},
															},
															Subnet: &armcomputefleet.APIEntityReference{
																ID: to.Ptr("cmkfcjhmrwxwqtac"),
															},
														},
													}},
												NetworkSecurityGroup: &armcomputefleet.SubResource{
													ID: to.Ptr("groxwd"),
												},
												Primary: to.Ptr(true),
											},
										}},
								},
								OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
									AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
									AllowExtensionOperations: to.Ptr(true),
									ComputerNamePrefix:       to.Ptr("o"),
									CustomData:               to.Ptr("xjjib"),
									LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
										DisablePasswordAuthentication: to.Ptr(true),
										EnableVMAgentPlatformUpdates:  to.Ptr(true),
										PatchSettings: &armcomputefleet.LinuxPatchSettings{
											AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
											AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
												RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
											},
											PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
										},
										ProvisionVMAgent: to.Ptr(true),
										SSH: &armcomputefleet.SSHConfiguration{
											PublicKeys: []*armcomputefleet.SSHPublicKey{
												{
													Path:    to.Ptr("kmqz"),
													KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
												}},
										},
									},
									RequireGuestProvisionSignal: to.Ptr(true),
									Secrets: []*armcomputefleet.VaultSecretGroup{
										{
											SourceVault: &armcomputefleet.SubResource{
												ID: to.Ptr("groxwd"),
											},
											VaultCertificates: []*armcomputefleet.VaultCertificate{
												{
													CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
													CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
												}},
										}},
									WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
										AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
											{
												ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
												Content:       to.Ptr("bubmqbxjkj"),
												PassName:      to.Ptr("OobeSystem"),
												SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
											}},
										EnableAutomaticUpdates:       to.Ptr(true),
										EnableVMAgentPlatformUpdates: to.Ptr(true),
										PatchSettings: &armcomputefleet.PatchSettings{
											AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
											AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
												RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
											},
											EnableHotpatching: to.Ptr(true),
											PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
										},
										ProvisionVMAgent: to.Ptr(true),
										TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
										WinRM: &armcomputefleet.WinRMConfiguration{
											Listeners: []*armcomputefleet.WinRMListener{
												{
													CertificateURL: to.Ptr("phwesineizrl"),
													Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
												}},
										},
									},
								},
								ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
									OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
										Enable:           to.Ptr(true),
										NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
									},
									TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
										Enable:           to.Ptr(true),
										NotBeforeTimeout: to.Ptr("iljppmmw"),
									},
								},
								SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
									ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
										{
											Name:     to.Ptr("zudiuxzkgqhxaam"),
											Type:     to.Ptr("lpnynhnniohtotmkznxku"),
											ID:       to.Ptr("ovmtxndtfwvcxnw"),
											Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
											Tags: map[string]*string{
												"key7356": to.Ptr("apuftleiygpnemfzryiop"),
											},
											Properties: &armcomputefleet.VirtualMachineExtensionProperties{
												Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
												AutoUpgradeMinorVersion: to.Ptr(true),
												EnableAutomaticUpgrade:  to.Ptr(true),
												ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
												InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
													Name: to.Ptr("ip"),
													Type: to.Ptr("woadxvobquacooaujyg"),
													Statuses: []*armcomputefleet.InstanceViewStatus{
														{
															Code:          to.Ptr("kuehuahsdozupmjrtp"),
															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
															Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
															Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
															Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
														}},
													Substatuses: []*armcomputefleet.InstanceViewStatus{
														{
															Code:          to.Ptr("kuehuahsdozupmjrtp"),
															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
															Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
															Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
															Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
														}},
													TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
												},
												ProtectedSettings: map[string]any{},
												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
													SourceVault: &armcomputefleet.SubResource{
														ID: to.Ptr("groxwd"),
													},
												},
												ProvisionAfterExtensions: []*string{
													to.Ptr("lwsfavklrgzuwmyxscskt")},
												ProvisioningState:  to.Ptr("Succeeded"),
												Publisher:          to.Ptr("rxoajzb"),
												Settings:           map[string]any{},
												SuppressFailures:   to.Ptr(true),
												TypeHandlerVersion: to.Ptr("bvzbiibps"),
											},
										}},
									ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
								},
								SecurityProfile: &armcomputefleet.SecurityProfile{
									EncryptionAtHost: to.Ptr(true),
									EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
										UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
									},
									ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
										Enabled:          to.Ptr(true),
										KeyIncarnationID: to.Ptr[int32](20),
										Mode:             to.Ptr(armcomputefleet.ModeAudit),
									},
									SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
									UefiSettings: &armcomputefleet.UefiSettings{
										SecureBootEnabled: to.Ptr(true),
										VTpmEnabled:       to.Ptr(true),
									},
								},
								ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
									ID: to.Ptr("qlkeeyskyr"),
								},
								StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
									DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
										{
											Name:              to.Ptr("eogiykmdmeikswxmigjws"),
											Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
											CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
											DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
											DiskIOPSReadWrite: to.Ptr[int64](27),
											DiskMBpsReadWrite: to.Ptr[int64](2),
											DiskSizeGB:        to.Ptr[int32](6),
											Lun:               to.Ptr[int32](14),
											ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
												},
												SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
													},
													SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
												},
												StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
											},
											WriteAcceleratorEnabled: to.Ptr(true),
										}},
									DiskControllerType: to.Ptr("uzb"),
									ImageReference: &armcomputefleet.ImageReference{
										ID:                      to.Ptr("aiunknwgksu"),
										CommunityGalleryImageID: to.Ptr("vlqe"),
										ExactVersion:            to.Ptr("zjbntmiskjexlr"),
										Offer:                   to.Ptr("isxgumkarlkomp"),
										Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
										SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
										SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
										Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
									},
									OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
										Name:         to.Ptr("wfttw"),
										Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
										CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
										DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
										DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
											Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
											Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
										},
										DiskSizeGB: to.Ptr[int32](14),
										Image: &armcomputefleet.VirtualHardDisk{
											URI: to.Ptr("thqceubivdrjs"),
										},
										ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
											},
											SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
												},
												SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
											},
											StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
										},
										OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
										VhdContainers: []*string{
											to.Ptr("tkzcwddtinkfpnfklatw")},
										WriteAcceleratorEnabled: to.Ptr(true),
									},
								},
								TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
								UserData:    to.Ptr("s"),
							},
							ComputeAPIVersion:        to.Ptr("2023-07-01"),
							PlatformFaultDomainCount: to.Ptr[int32](1),
						},
						ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
						RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
							AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
							Capacity:           to.Ptr[int32](20),
							MinCapacity:        to.Ptr[int32](10),
						},
						SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
							AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
							Capacity:           to.Ptr[int32](20),
							EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
							Maintain:           to.Ptr(true),
							MaxPricePerVM:      to.Ptr[float32](0.00865),
							MinCapacity:        to.Ptr[int32](10),
						},
						VMSizesProfile: []*armcomputefleet.VMSizeProfile{
							{
								Name: to.Ptr("Standard_d1_v2"),
								Rank: to.Ptr[int32](19225),
							}},
					},
					Zones: []*string{
						to.Ptr("zone1"),
						to.Ptr("zone2")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FleetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FleetListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFleets_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_ListByResourceGroup"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("rgazurefleet", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json")
		// Response check
		pagerExampleRes := armcomputefleet.FleetListResult{
			Value: []*armcomputefleet.Fleet{
				{
					Name: to.Ptr("testFleet"),
					Type: to.Ptr("Microsoft.AzureFleet/fleets"),
					ID:   to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
					SystemData: &armcomputefleet.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
						CreatedBy:          to.Ptr("rowegentrpoajsv"),
						CreatedByType:      to.Ptr(armcomputefleet.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
						LastModifiedBy:     to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
						LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
					},
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
					},
					Identity: &armcomputefleet.ManagedServiceIdentity{
						Type:        to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
						PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
						TenantID:    to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
						UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
							"key9851": &armcomputefleet.UserAssignedIdentity{
								ClientID:    to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
								PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
							},
						},
					},
					Properties: &armcomputefleet.FleetProperties{
						ComputeProfile: &armcomputefleet.ComputeProfile{
							BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
								ApplicationProfile: &armcomputefleet.ApplicationProfile{
									GalleryApplications: []*armcomputefleet.VMGalleryApplication{
										{
											ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
											EnableAutomaticUpgrade:          to.Ptr(true),
											Order:                           to.Ptr[int32](5),
											PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
											Tags:                            to.Ptr("eyrqjbib"),
											TreatFailureAsDeploymentFailure: to.Ptr(true),
										}},
								},
								CapacityReservation: &armcomputefleet.CapacityReservationProfile{
									CapacityReservationGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
								},
								DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
									BootDiagnostics: &armcomputefleet.BootDiagnostics{
										Enabled:    to.Ptr(true),
										StorageURI: to.Ptr("rzamfwghybpx"),
									},
								},
								ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
									ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
									Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
										{
											ID:   to.Ptr("fmheufuaqonfvirwrpd"),
											Name: to.Ptr("bndxuxx"),
											Type: to.Ptr("cmeam"),
											Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
												Type:                    to.Ptr("pgjilctjjwaa"),
												AutoUpgradeMinorVersion: to.Ptr(true),
												EnableAutomaticUpgrade:  to.Ptr(true),
												ForceUpdateTag:          to.Ptr("yhgxw"),
												ProtectedSettings:       map[string]any{},
												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
													SourceVault: &armcomputefleet.SubResource{
														ID: to.Ptr("groxwd"),
													},
												},
												ProvisionAfterExtensions: []*string{
													to.Ptr("nftzosroolbcwmpupujzqwqe")},
												ProvisioningState:  to.Ptr("Succeeded"),
												Publisher:          to.Ptr("kpxtirxjfprhs"),
												Settings:           map[string]any{},
												SuppressFailures:   to.Ptr(true),
												TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
											},
										}},
								},
								HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
									VMSizeProperties: &armcomputefleet.VMSizeProperties{
										VCPUsAvailable: to.Ptr[int32](16),
										VCPUsPerCore:   to.Ptr[int32](23),
									},
								},
								LicenseType: to.Ptr("v"),
								NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
									HealthProbe: &armcomputefleet.APIEntityReference{
										ID: to.Ptr("cmkfcjhmrwxwqtac"),
									},
									NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
									NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
										{
											Name: to.Ptr("i"),
											Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
												AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
												AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
												DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
												DisableTCPStateTracking: to.Ptr(true),
												DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
													DNSServers: []*string{
														to.Ptr("nxmmfolhclsesu")},
												},
												EnableAcceleratedNetworking: to.Ptr(true),
												EnableFpga:                  to.Ptr(true),
												EnableIPForwarding:          to.Ptr(true),
												IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
													{
														Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
														Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
															ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															ApplicationSecurityGroups: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
																{
																	ID: to.Ptr("groxwd"),
																}},
															Primary:                 to.Ptr(true),
															PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
															PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
																Name: to.Ptr("fvpqf"),
																Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
																	DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
																	DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																		DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
																		DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
																	},
																	IdleTimeoutInMinutes: to.Ptr[int32](9),
																	IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
																		{
																			IPTagType: to.Ptr("sddgsoemnzgqizale"),
																			Tag:       to.Ptr("wufmhrjsakbiaetyara"),
																		}},
																	PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
																	PublicIPPrefix: &armcomputefleet.SubResource{
																		ID: to.Ptr("groxwd"),
																	},
																},
																SKU: &armcomputefleet.PublicIPAddressSKU{
																	Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
																	Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
																},
															},
															Subnet: &armcomputefleet.APIEntityReference{
																ID: to.Ptr("cmkfcjhmrwxwqtac"),
															},
														},
													}},
												NetworkSecurityGroup: &armcomputefleet.SubResource{
													ID: to.Ptr("groxwd"),
												},
												Primary: to.Ptr(true),
											},
										}},
								},
								OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
									AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
									AllowExtensionOperations: to.Ptr(true),
									ComputerNamePrefix:       to.Ptr("o"),
									CustomData:               to.Ptr("xjjib"),
									LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
										DisablePasswordAuthentication: to.Ptr(true),
										EnableVMAgentPlatformUpdates:  to.Ptr(true),
										PatchSettings: &armcomputefleet.LinuxPatchSettings{
											AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
											AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
												RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
											},
											PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
										},
										ProvisionVMAgent: to.Ptr(true),
										SSH: &armcomputefleet.SSHConfiguration{
											PublicKeys: []*armcomputefleet.SSHPublicKey{
												{
													Path:    to.Ptr("kmqz"),
													KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
												}},
										},
									},
									RequireGuestProvisionSignal: to.Ptr(true),
									Secrets: []*armcomputefleet.VaultSecretGroup{
										{
											SourceVault: &armcomputefleet.SubResource{
												ID: to.Ptr("groxwd"),
											},
											VaultCertificates: []*armcomputefleet.VaultCertificate{
												{
													CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
													CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
												}},
										}},
									WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
										AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
											{
												ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
												Content:       to.Ptr("bubmqbxjkj"),
												PassName:      to.Ptr("OobeSystem"),
												SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
											}},
										EnableAutomaticUpdates:       to.Ptr(true),
										EnableVMAgentPlatformUpdates: to.Ptr(true),
										PatchSettings: &armcomputefleet.PatchSettings{
											AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
											AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
												RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
											},
											EnableHotpatching: to.Ptr(true),
											PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
										},
										ProvisionVMAgent: to.Ptr(true),
										TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
										WinRM: &armcomputefleet.WinRMConfiguration{
											Listeners: []*armcomputefleet.WinRMListener{
												{
													CertificateURL: to.Ptr("phwesineizrl"),
													Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
												}},
										},
									},
								},
								ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
									OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
										Enable:           to.Ptr(true),
										NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
									},
									TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
										Enable:           to.Ptr(true),
										NotBeforeTimeout: to.Ptr("iljppmmw"),
									},
								},
								SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
									ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
										{
											Name:     to.Ptr("zudiuxzkgqhxaam"),
											Type:     to.Ptr("lpnynhnniohtotmkznxku"),
											ID:       to.Ptr("ovmtxndtfwvcxnw"),
											Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
											Tags: map[string]*string{
												"key7356": to.Ptr("apuftleiygpnemfzryiop"),
											},
											Properties: &armcomputefleet.VirtualMachineExtensionProperties{
												Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
												AutoUpgradeMinorVersion: to.Ptr(true),
												EnableAutomaticUpgrade:  to.Ptr(true),
												ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
												InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
													Name: to.Ptr("ip"),
													Type: to.Ptr("woadxvobquacooaujyg"),
													Statuses: []*armcomputefleet.InstanceViewStatus{
														{
															Code:          to.Ptr("kuehuahsdozupmjrtp"),
															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
															Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
															Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
															Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
														}},
													Substatuses: []*armcomputefleet.InstanceViewStatus{
														{
															Code:          to.Ptr("kuehuahsdozupmjrtp"),
															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
															Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
															Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
															Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
														}},
													TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
												},
												ProtectedSettings: map[string]any{},
												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
													SourceVault: &armcomputefleet.SubResource{
														ID: to.Ptr("groxwd"),
													},
												},
												ProvisionAfterExtensions: []*string{
													to.Ptr("lwsfavklrgzuwmyxscskt")},
												ProvisioningState:  to.Ptr("Succeeded"),
												Publisher:          to.Ptr("rxoajzb"),
												Settings:           map[string]any{},
												SuppressFailures:   to.Ptr(true),
												TypeHandlerVersion: to.Ptr("bvzbiibps"),
											},
										}},
									ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
								},
								SecurityProfile: &armcomputefleet.SecurityProfile{
									EncryptionAtHost: to.Ptr(true),
									EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
										UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
									},
									ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
										Enabled:          to.Ptr(true),
										KeyIncarnationID: to.Ptr[int32](20),
										Mode:             to.Ptr(armcomputefleet.ModeAudit),
									},
									SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
									UefiSettings: &armcomputefleet.UefiSettings{
										SecureBootEnabled: to.Ptr(true),
										VTpmEnabled:       to.Ptr(true),
									},
								},
								ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
									ID: to.Ptr("qlkeeyskyr"),
								},
								StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
									DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
										{
											Name:              to.Ptr("eogiykmdmeikswxmigjws"),
											Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
											CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
											DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
											DiskIOPSReadWrite: to.Ptr[int64](27),
											DiskMBpsReadWrite: to.Ptr[int64](2),
											DiskSizeGB:        to.Ptr[int32](6),
											Lun:               to.Ptr[int32](14),
											ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
												},
												SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
													},
													SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
												},
												StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
											},
											WriteAcceleratorEnabled: to.Ptr(true),
										}},
									DiskControllerType: to.Ptr("uzb"),
									ImageReference: &armcomputefleet.ImageReference{
										ID:                      to.Ptr("aiunknwgksu"),
										CommunityGalleryImageID: to.Ptr("vlqe"),
										ExactVersion:            to.Ptr("zjbntmiskjexlr"),
										Offer:                   to.Ptr("isxgumkarlkomp"),
										Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
										SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
										SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
										Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
									},
									OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
										Name:         to.Ptr("wfttw"),
										Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
										CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
										DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
										DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
											Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
											Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
										},
										DiskSizeGB: to.Ptr[int32](14),
										Image: &armcomputefleet.VirtualHardDisk{
											URI: to.Ptr("thqceubivdrjs"),
										},
										ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
											},
											SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
												},
												SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
											},
											StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
										},
										OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
										VhdContainers: []*string{
											to.Ptr("tkzcwddtinkfpnfklatw")},
										WriteAcceleratorEnabled: to.Ptr(true),
									},
								},
								TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
								UserData:    to.Ptr("s"),
							},
							ComputeAPIVersion:        to.Ptr("2023-07-01"),
							PlatformFaultDomainCount: to.Ptr[int32](1),
						},
						ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
						RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
							AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
							Capacity:           to.Ptr[int32](20),
							MinCapacity:        to.Ptr[int32](10),
						},
						SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
							AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
							Capacity:           to.Ptr[int32](20),
							EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
							Maintain:           to.Ptr(true),
							MaxPricePerVM:      to.Ptr[float32](0.00865),
							MinCapacity:        to.Ptr[int32](10),
						},
						VMSizesProfile: []*armcomputefleet.VMSizeProfile{
							{
								Name: to.Ptr("Standard_d1_v2"),
								Rank: to.Ptr[int32](19225),
							}},
					},
					Zones: []*string{
						to.Ptr("zone1"),
						to.Ptr("zone2")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FleetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FleetListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestFleets_Get() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_Get"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx, "rgazurefleet", "testFleet", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json")
	// Response check
	exampleRes := armcomputefleet.Fleet{
		Name: to.Ptr("testFleet"),
		Type: to.Ptr("Microsoft.AzureFleet/fleets"),
		ID:   to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
		SystemData: &armcomputefleet.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			CreatedBy:          to.Ptr("rowegentrpoajsv"),
			CreatedByType:      to.Ptr(armcomputefleet.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			LastModifiedBy:     to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
			LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
		},
		Identity: &armcomputefleet.ManagedServiceIdentity{
			Type:        to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			TenantID:    to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
				"key9851": &armcomputefleet.UserAssignedIdentity{
					ClientID:    to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
					PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
				},
			},
		},
		Properties: &armcomputefleet.FleetProperties{
			ComputeProfile: &armcomputefleet.ComputeProfile{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					BillingProfile: &armcomputefleet.BillingProfile{
						MaxPrice: to.Ptr[float64](2),
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					EvictionPolicy: to.Ptr(armcomputefleet.VirtualMachineEvictionPolicyTypesDeallocate),
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								ID:   to.Ptr("fmheufuaqonfvirwrpd"),
								Name: to.Ptr("bndxuxx"),
								Type: to.Ptr("cmeam"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						CustomData:               to.Ptr("xjjib"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("bubmqbxjkj"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					Priority: to.Ptr(armcomputefleet.VirtualMachinePriorityTypesRegular),
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Name:     to.Ptr("zudiuxzkgqhxaam"),
								Type:     to.Ptr("lpnynhnniohtotmkznxku"),
								ID:       to.Ptr("ovmtxndtfwvcxnw"),
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags: map[string]*string{
									"key7356": to.Ptr("apuftleiygpnemfzryiop"),
								},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							ExactVersion:            to.Ptr("zjbntmiskjexlr"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
					UserData:    to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](20),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](20),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](10),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Zones: []*string{
			to.Ptr("zone1"),
			to.Ptr("zone2")},
	}
	if !reflect.DeepEqual(exampleRes, res.Fleet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Fleet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFleets_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_CreateOrUpdate"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx, "rgazurefleet", "testFleet", armcomputefleet.Fleet{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
		},
		Identity: &armcomputefleet.ManagedServiceIdentity{
			Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
				"key9851": &armcomputefleet.UserAssignedIdentity{},
			},
		},
		Properties: &armcomputefleet.FleetProperties{
			ComputeProfile: &armcomputefleet.ComputeProfile{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("bndxuxx"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminPassword:            to.Ptr("adfbrdxpv"),
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						CustomData:               to.Ptr("xjjib"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("bubmqbxjkj"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags: map[string]*string{
									"key7356": to.Ptr("apuftleiygpnemfzryiop"),
								},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](20),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](20),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](10),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Zones: []*string{
			to.Ptr("zone1"),
			to.Ptr("zone2")},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json")
	// Response check
	exampleRes := armcomputefleet.Fleet{
		Name: to.Ptr("testFleet"),
		Type: to.Ptr("Microsoft.AzureFleet/fleets"),
		ID:   to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
		SystemData: &armcomputefleet.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			CreatedBy:          to.Ptr("rowegentrpoajsv"),
			CreatedByType:      to.Ptr(armcomputefleet.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			LastModifiedBy:     to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
			LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
		},
		Identity: &armcomputefleet.ManagedServiceIdentity{
			Type:        to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			TenantID:    to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
				"key9851": &armcomputefleet.UserAssignedIdentity{
					ClientID:    to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
					PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
				},
			},
		},
		Properties: &armcomputefleet.FleetProperties{
			ComputeProfile: &armcomputefleet.ComputeProfile{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								ID:   to.Ptr("fmheufuaqonfvirwrpd"),
								Name: to.Ptr("bndxuxx"),
								Type: to.Ptr("cmeam"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Name:     to.Ptr("zudiuxzkgqhxaam"),
								Type:     to.Ptr("lpnynhnniohtotmkznxku"),
								ID:       to.Ptr("ovmtxndtfwvcxnw"),
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags: map[string]*string{
									"key7356": to.Ptr("apuftleiygpnemfzryiop"),
								},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							ExactVersion:            to.Ptr("zjbntmiskjexlr"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
					UserData:    to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](10),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](10),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](20),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Zones: []*string{
			to.Ptr("zone1"),
			to.Ptr("zone2")},
	}
	if !reflect.DeepEqual(exampleRes, res.Fleet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Fleet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFleets_Update() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_Update"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx, "rgazurefleet", "testFleet", armcomputefleet.FleetUpdate{
		Identity: &armcomputefleet.ManagedServiceIdentityUpdate{
			Type:                   to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{},
		},
		Plan: &armcomputefleet.ResourcePlanUpdate{
			Name:          to.Ptr("jwgrcrnrtfoxn"),
			Product:       to.Ptr("cgopbyvdyqikahwyxfpzwaqk"),
			PromotionCode: to.Ptr("naglezezplcaruqogtxnuizslqnnbr"),
			Publisher:     to.Ptr("iozjbiqqckqm"),
			Version:       to.Ptr("wa"),
		},
		Properties: &armcomputefleet.FleetPropertiesUpdate{
			ComputeProfile: &armcomputefleet.ComputeProfileUpdate{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("bndxuxx"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminPassword:            to.Ptr("adfbrdxpv"),
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						CustomData:               to.Ptr("xjjib"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("bubmqbxjkj"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags:     map[string]*string{},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](20),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](20),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](10),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Tags: map[string]*string{},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json")
	// Response check
	exampleRes := armcomputefleet.Fleet{
		Name: to.Ptr("testFleet"),
		Type: to.Ptr("Microsoft.AzureFleet/fleets"),
		ID:   to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
		SystemData: &armcomputefleet.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			CreatedBy:          to.Ptr("rowegentrpoajsv"),
			CreatedByType:      to.Ptr(armcomputefleet.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
			LastModifiedBy:     to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
			LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Identity: &armcomputefleet.ManagedServiceIdentity{
			Type:                   to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			PrincipalID:            to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			TenantID:               to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{},
		},
		Plan: &armcomputefleet.Plan{
			Name:          to.Ptr("uapfngmdekvpgjhomthtpxjfdmmll"),
			Product:       to.Ptr("bfzbkdnbexmedxdc"),
			PromotionCode: to.Ptr("gspehogwfjxirz"),
			Publisher:     to.Ptr("aqhles"),
			Version:       to.Ptr("yza"),
		},
		Properties: &armcomputefleet.FleetProperties{
			ComputeProfile: &armcomputefleet.ComputeProfile{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								ID:   to.Ptr("fmheufuaqonfvirwrpd"),
								Name: to.Ptr("bndxuxx"),
								Type: to.Ptr("cmeam"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Name:     to.Ptr("zudiuxzkgqhxaam"),
								Type:     to.Ptr("lpnynhnniohtotmkznxku"),
								ID:       to.Ptr("ovmtxndtfwvcxnw"),
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags:     map[string]*string{},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									ProvisioningState:  to.Ptr("Succeeded"),
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							ExactVersion:            to.Ptr("zjbntmiskjexlr"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t }()),
					UserData:    to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](20),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](20),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](10),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Zones: []*string{
			to.Ptr("zone1"),
			to.Ptr("zone2")},
	}
	if !reflect.DeepEqual(exampleRes, res.Fleet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Fleet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestFleets_Delete() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_Delete"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx, "rgazurefleet", "testFleet", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Delete.json")
}

func (testsuite *MockTestSuite) TestFleets_ListVirtualMachineScaleSets() {
	ctx := context.Background()
	// From example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListVirtualMachineScaleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Fleets_ListVirtualMachineScaleSets"},
	})
	client, err := armcomputefleet.NewFleetsClient("1DC2F28C-A625-4B0E-9748-9885A3C9E9EB", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListVirtualMachineScaleSetsPager("rgazurefleet", "myFleet", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListVirtualMachineScaleSets.json")
		// Response check
		pagerExampleRes := armcomputefleet.VirtualMachineScaleSetListResult{
			Value: []*armcomputefleet.VirtualMachineScaleSet{
				{
					Name: to.Ptr("myVmss"),
					Type: to.Ptr("Microsoft.AzureFleet/fleets/virtualMachineScaleSets"),
					Error: &armcomputefleet.APIError{
						Code: to.Ptr("OverconstrainedAllocationRequest"),
						Innererror: &armcomputefleet.InnerError{
							Errordetail:   to.Ptr("ihjwbwykq"),
							Exceptiontype: to.Ptr("sfaomfpoaptnbxchrfskm"),
						},
						Message: to.Ptr("Allocation Failed"),
						Target:  to.Ptr("nhaj"),
						Details: []*armcomputefleet.APIErrorBase{
							{
								Code:    to.Ptr("gzhtOverconstrainedAllocationRequestyosk"),
								Message: to.Ptr("Allocation Failed"),
								Target:  to.Ptr("qfthabhrmndhfizfnrwpgxvnokpy"),
							}},
					},
					ID:              to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/myFleet/virtualMachineScaleSets/myVmss"),
					OperationStatus: to.Ptr(armcomputefleet.ProvisioningStateCreating),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListVirtualMachineScaleSets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}
