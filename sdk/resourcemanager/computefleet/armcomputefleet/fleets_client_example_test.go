//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcomputefleet_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListBySubscription.json
func ExampleFleetsClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewFleetsClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.FleetListResult = armcomputefleet.FleetListResult{
		// 	Value: []*armcomputefleet.Fleet{
		// 		{
		// 			Name: to.Ptr("testFleet"),
		// 			Type: to.Ptr("Microsoft.AzureFleet/fleets"),
		// 			ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
		// 			SystemData: &armcomputefleet.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 				CreatedBy: to.Ptr("rowegentrpoajsv"),
		// 				CreatedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
		// 				LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
		// 			},
		// 			Identity: &armcomputefleet.ManagedServiceIdentity{
		// 				Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
		// 				PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 				TenantID: to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 				UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
		// 					"key9851": &armcomputefleet.UserAssignedIdentity{
		// 						ClientID: to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 						PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 					},
		// 				},
		// 			},
		// 			Properties: &armcomputefleet.FleetProperties{
		// 				ComputeProfile: &armcomputefleet.ComputeProfile{
		// 					BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
		// 						ApplicationProfile: &armcomputefleet.ApplicationProfile{
		// 							GalleryApplications: []*armcomputefleet.VMGalleryApplication{
		// 								{
		// 									ConfigurationReference: to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
		// 									EnableAutomaticUpgrade: to.Ptr(true),
		// 									Order: to.Ptr[int32](5),
		// 									PackageReferenceID: to.Ptr("lfxqiadouhmbovcd"),
		// 									Tags: to.Ptr("eyrqjbib"),
		// 									TreatFailureAsDeploymentFailure: to.Ptr(true),
		// 							}},
		// 						},
		// 						CapacityReservation: &armcomputefleet.CapacityReservationProfile{
		// 							CapacityReservationGroup: &armcomputefleet.SubResource{
		// 								ID: to.Ptr("groxwd"),
		// 							},
		// 						},
		// 						DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
		// 							BootDiagnostics: &armcomputefleet.BootDiagnostics{
		// 								Enabled: to.Ptr(true),
		// 								StorageURI: to.Ptr("rzamfwghybpx"),
		// 							},
		// 						},
		// 						ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
		// 							ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
		// 							Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
		// 								{
		// 									ID: to.Ptr("fmheufuaqonfvirwrpd"),
		// 									Name: to.Ptr("bndxuxx"),
		// 									Type: to.Ptr("cmeam"),
		// 									Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
		// 										Type: to.Ptr("pgjilctjjwaa"),
		// 										AutoUpgradeMinorVersion: to.Ptr(true),
		// 										EnableAutomaticUpgrade: to.Ptr(true),
		// 										ForceUpdateTag: to.Ptr("yhgxw"),
		// 										ProtectedSettings: map[string]any{
		// 										},
		// 										ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
		// 											SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
		// 											SourceVault: &armcomputefleet.SubResource{
		// 												ID: to.Ptr("groxwd"),
		// 											},
		// 										},
		// 										ProvisionAfterExtensions: []*string{
		// 											to.Ptr("nftzosroolbcwmpupujzqwqe")},
		// 											ProvisioningState: to.Ptr("Succeeded"),
		// 											Publisher: to.Ptr("kpxtirxjfprhs"),
		// 											Settings: map[string]any{
		// 											},
		// 											SuppressFailures: to.Ptr(true),
		// 											TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
		// 										},
		// 								}},
		// 							},
		// 							HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
		// 								VMSizeProperties: &armcomputefleet.VMSizeProperties{
		// 									VCPUsAvailable: to.Ptr[int32](16),
		// 									VCPUsPerCore: to.Ptr[int32](23),
		// 								},
		// 							},
		// 							LicenseType: to.Ptr("v"),
		// 							NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
		// 								HealthProbe: &armcomputefleet.APIEntityReference{
		// 									ID: to.Ptr("cmkfcjhmrwxwqtac"),
		// 								},
		// 								NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
		// 								NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
		// 									{
		// 										Name: to.Ptr("i"),
		// 										Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
		// 											AuxiliaryMode: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
		// 											AuxiliarySKU: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
		// 											DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
		// 											DisableTCPStateTracking: to.Ptr(true),
		// 											DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
		// 												DNSServers: []*string{
		// 													to.Ptr("nxmmfolhclsesu")},
		// 												},
		// 												EnableAcceleratedNetworking: to.Ptr(true),
		// 												EnableFpga: to.Ptr(true),
		// 												EnableIPForwarding: to.Ptr(true),
		// 												IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
		// 													{
		// 														Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
		// 														Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
		// 															ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															ApplicationSecurityGroups: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															Primary: to.Ptr(true),
		// 															PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
		// 															PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
		// 																Name: to.Ptr("fvpqf"),
		// 																Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
		// 																	DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
		// 																	DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
		// 																		DomainNameLabel: to.Ptr("ukrddzvmorpmfsczjwtbvp"),
		// 																		DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
		// 																	},
		// 																	IdleTimeoutInMinutes: to.Ptr[int32](9),
		// 																	IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
		// 																		{
		// 																			IPTagType: to.Ptr("sddgsoemnzgqizale"),
		// 																			Tag: to.Ptr("wufmhrjsakbiaetyara"),
		// 																	}},
		// 																	PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
		// 																	PublicIPPrefix: &armcomputefleet.SubResource{
		// 																		ID: to.Ptr("groxwd"),
		// 																	},
		// 																},
		// 																SKU: &armcomputefleet.PublicIPAddressSKU{
		// 																	Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
		// 																	Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
		// 																},
		// 															},
		// 															Subnet: &armcomputefleet.APIEntityReference{
		// 																ID: to.Ptr("cmkfcjhmrwxwqtac"),
		// 															},
		// 														},
		// 												}},
		// 												NetworkSecurityGroup: &armcomputefleet.SubResource{
		// 													ID: to.Ptr("groxwd"),
		// 												},
		// 												Primary: to.Ptr(true),
		// 											},
		// 									}},
		// 								},
		// 								OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
		// 									AdminUsername: to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
		// 									AllowExtensionOperations: to.Ptr(true),
		// 									ComputerNamePrefix: to.Ptr("o"),
		// 									CustomData: to.Ptr("xjjib"),
		// 									LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
		// 										DisablePasswordAuthentication: to.Ptr(true),
		// 										EnableVMAgentPlatformUpdates: to.Ptr(true),
		// 										PatchSettings: &armcomputefleet.LinuxPatchSettings{
		// 											AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
		// 											AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
		// 												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
		// 												RebootSetting: to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
		// 											},
		// 											PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
		// 										},
		// 										ProvisionVMAgent: to.Ptr(true),
		// 										SSH: &armcomputefleet.SSHConfiguration{
		// 											PublicKeys: []*armcomputefleet.SSHPublicKey{
		// 												{
		// 													Path: to.Ptr("kmqz"),
		// 													KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
		// 											}},
		// 										},
		// 									},
		// 									RequireGuestProvisionSignal: to.Ptr(true),
		// 									Secrets: []*armcomputefleet.VaultSecretGroup{
		// 										{
		// 											SourceVault: &armcomputefleet.SubResource{
		// 												ID: to.Ptr("groxwd"),
		// 											},
		// 											VaultCertificates: []*armcomputefleet.VaultCertificate{
		// 												{
		// 													CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
		// 													CertificateURL: to.Ptr("tyldwkzafmnkvpo"),
		// 											}},
		// 									}},
		// 									WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
		// 										AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
		// 											{
		// 												ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
		// 												Content: to.Ptr("bubmqbxjkj"),
		// 												PassName: to.Ptr("OobeSystem"),
		// 												SettingName: to.Ptr(armcomputefleet.SettingNamesAutoLogon),
		// 										}},
		// 										EnableAutomaticUpdates: to.Ptr(true),
		// 										EnableVMAgentPlatformUpdates: to.Ptr(true),
		// 										PatchSettings: &armcomputefleet.PatchSettings{
		// 											AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
		// 											AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
		// 												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
		// 												RebootSetting: to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
		// 											},
		// 											EnableHotpatching: to.Ptr(true),
		// 											PatchMode: to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
		// 										},
		// 										ProvisionVMAgent: to.Ptr(true),
		// 										TimeZone: to.Ptr("hlyjiqcfksgrpjrct"),
		// 										WinRM: &armcomputefleet.WinRMConfiguration{
		// 											Listeners: []*armcomputefleet.WinRMListener{
		// 												{
		// 													CertificateURL: to.Ptr("phwesineizrl"),
		// 													Protocol: to.Ptr(armcomputefleet.ProtocolTypesHTTP),
		// 											}},
		// 										},
		// 									},
		// 								},
		// 								ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
		// 									OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
		// 										Enable: to.Ptr(true),
		// 										NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
		// 									},
		// 									TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
		// 										Enable: to.Ptr(true),
		// 										NotBeforeTimeout: to.Ptr("iljppmmw"),
		// 									},
		// 								},
		// 								SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
		// 									ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
		// 										{
		// 											Name: to.Ptr("zudiuxzkgqhxaam"),
		// 											Type: to.Ptr("lpnynhnniohtotmkznxku"),
		// 											ID: to.Ptr("ovmtxndtfwvcxnw"),
		// 											Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
		// 											Tags: map[string]*string{
		// 												"key7356": to.Ptr("apuftleiygpnemfzryiop"),
		// 											},
		// 											Properties: &armcomputefleet.VirtualMachineExtensionProperties{
		// 												Type: to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
		// 												AutoUpgradeMinorVersion: to.Ptr(true),
		// 												EnableAutomaticUpgrade: to.Ptr(true),
		// 												ForceUpdateTag: to.Ptr("oriasdwawveilgusfrn"),
		// 												InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
		// 													Name: to.Ptr("ip"),
		// 													Type: to.Ptr("woadxvobquacooaujyg"),
		// 													Statuses: []*armcomputefleet.InstanceViewStatus{
		// 														{
		// 															Code: to.Ptr("kuehuahsdozupmjrtp"),
		// 															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
		// 															Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
		// 															Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
		// 															Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
		// 													}},
		// 													Substatuses: []*armcomputefleet.InstanceViewStatus{
		// 														{
		// 															Code: to.Ptr("kuehuahsdozupmjrtp"),
		// 															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
		// 															Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
		// 															Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
		// 															Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
		// 													}},
		// 													TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
		// 												},
		// 												ProtectedSettings: map[string]any{
		// 												},
		// 												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
		// 													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
		// 													SourceVault: &armcomputefleet.SubResource{
		// 														ID: to.Ptr("groxwd"),
		// 													},
		// 												},
		// 												ProvisionAfterExtensions: []*string{
		// 													to.Ptr("lwsfavklrgzuwmyxscskt")},
		// 													ProvisioningState: to.Ptr("Succeeded"),
		// 													Publisher: to.Ptr("rxoajzb"),
		// 													Settings: map[string]any{
		// 													},
		// 													SuppressFailures: to.Ptr(true),
		// 													TypeHandlerVersion: to.Ptr("bvzbiibps"),
		// 												},
		// 										}},
		// 										ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
		// 									},
		// 									SecurityProfile: &armcomputefleet.SecurityProfile{
		// 										EncryptionAtHost: to.Ptr(true),
		// 										EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
		// 											UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
		// 										},
		// 										ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
		// 											Enabled: to.Ptr(true),
		// 											KeyIncarnationID: to.Ptr[int32](20),
		// 											Mode: to.Ptr(armcomputefleet.ModeAudit),
		// 										},
		// 										SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
		// 										UefiSettings: &armcomputefleet.UefiSettings{
		// 											SecureBootEnabled: to.Ptr(true),
		// 											VTpmEnabled: to.Ptr(true),
		// 										},
		// 									},
		// 									ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
		// 										ID: to.Ptr("qlkeeyskyr"),
		// 									},
		// 									StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
		// 										DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
		// 											{
		// 												Name: to.Ptr("eogiykmdmeikswxmigjws"),
		// 												Caching: to.Ptr(armcomputefleet.CachingTypesNone),
		// 												CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
		// 												DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
		// 												DiskIOPSReadWrite: to.Ptr[int64](27),
		// 												DiskMBpsReadWrite: to.Ptr[int64](2),
		// 												DiskSizeGB: to.Ptr[int32](6),
		// 												Lun: to.Ptr[int32](14),
		// 												ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
		// 													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 													},
		// 													SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
		// 														DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 															ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 														},
		// 														SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
		// 													},
		// 													StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
		// 												},
		// 												WriteAcceleratorEnabled: to.Ptr(true),
		// 										}},
		// 										DiskControllerType: to.Ptr("uzb"),
		// 										ImageReference: &armcomputefleet.ImageReference{
		// 											ID: to.Ptr("aiunknwgksu"),
		// 											CommunityGalleryImageID: to.Ptr("vlqe"),
		// 											ExactVersion: to.Ptr("zjbntmiskjexlr"),
		// 											Offer: to.Ptr("isxgumkarlkomp"),
		// 											Publisher: to.Ptr("mqxgwbiyjzmxavhbkd"),
		// 											SharedGalleryImageID: to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
		// 											SKU: to.Ptr("eojmppqcrnpmxirtp"),
		// 											Version: to.Ptr("wvpcqefgtmqdgltiuz"),
		// 										},
		// 										OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
		// 											Name: to.Ptr("wfttw"),
		// 											Caching: to.Ptr(armcomputefleet.CachingTypesNone),
		// 											CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
		// 											DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
		// 											DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
		// 												Option: to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
		// 												Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
		// 											},
		// 											DiskSizeGB: to.Ptr[int32](14),
		// 											Image: &armcomputefleet.VirtualHardDisk{
		// 												URI: to.Ptr("thqceubivdrjs"),
		// 											},
		// 											ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
		// 												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 												},
		// 												SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
		// 													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 													},
		// 													SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
		// 												},
		// 												StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
		// 											},
		// 											OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
		// 											VhdContainers: []*string{
		// 												to.Ptr("tkzcwddtinkfpnfklatw")},
		// 												WriteAcceleratorEnabled: to.Ptr(true),
		// 											},
		// 										},
		// 										TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 										UserData: to.Ptr("s"),
		// 									},
		// 									ComputeAPIVersion: to.Ptr("2023-07-01"),
		// 									PlatformFaultDomainCount: to.Ptr[int32](1),
		// 								},
		// 								ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
		// 								RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
		// 									AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
		// 									Capacity: to.Ptr[int32](20),
		// 									MinCapacity: to.Ptr[int32](10),
		// 								},
		// 								SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
		// 									AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
		// 									Capacity: to.Ptr[int32](20),
		// 									EvictionPolicy: to.Ptr(armcomputefleet.EvictionPolicyDelete),
		// 									Maintain: to.Ptr(true),
		// 									MaxPricePerVM: to.Ptr[float32](0.00865),
		// 									MinCapacity: to.Ptr[int32](10),
		// 								},
		// 								VMSizesProfile: []*armcomputefleet.VMSizeProfile{
		// 									{
		// 										Name: to.Ptr("Standard_d1_v2"),
		// 										Rank: to.Ptr[int32](19225),
		// 								}},
		// 							},
		// 							Zones: []*string{
		// 								to.Ptr("zone1"),
		// 								to.Ptr("zone2")},
		// 						}},
		// 					}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json
func ExampleFleetsClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewFleetsClient().NewListByResourceGroupPager("rgazurefleet", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.FleetListResult = armcomputefleet.FleetListResult{
		// 	Value: []*armcomputefleet.Fleet{
		// 		{
		// 			Name: to.Ptr("testFleet"),
		// 			Type: to.Ptr("Microsoft.AzureFleet/fleets"),
		// 			ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
		// 			SystemData: &armcomputefleet.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 				CreatedBy: to.Ptr("rowegentrpoajsv"),
		// 				CreatedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
		// 				LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
		// 			},
		// 			Identity: &armcomputefleet.ManagedServiceIdentity{
		// 				Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
		// 				PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 				TenantID: to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 				UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
		// 					"key9851": &armcomputefleet.UserAssignedIdentity{
		// 						ClientID: to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 						PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
		// 					},
		// 				},
		// 			},
		// 			Properties: &armcomputefleet.FleetProperties{
		// 				ComputeProfile: &armcomputefleet.ComputeProfile{
		// 					BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
		// 						ApplicationProfile: &armcomputefleet.ApplicationProfile{
		// 							GalleryApplications: []*armcomputefleet.VMGalleryApplication{
		// 								{
		// 									ConfigurationReference: to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
		// 									EnableAutomaticUpgrade: to.Ptr(true),
		// 									Order: to.Ptr[int32](5),
		// 									PackageReferenceID: to.Ptr("lfxqiadouhmbovcd"),
		// 									Tags: to.Ptr("eyrqjbib"),
		// 									TreatFailureAsDeploymentFailure: to.Ptr(true),
		// 							}},
		// 						},
		// 						CapacityReservation: &armcomputefleet.CapacityReservationProfile{
		// 							CapacityReservationGroup: &armcomputefleet.SubResource{
		// 								ID: to.Ptr("groxwd"),
		// 							},
		// 						},
		// 						DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
		// 							BootDiagnostics: &armcomputefleet.BootDiagnostics{
		// 								Enabled: to.Ptr(true),
		// 								StorageURI: to.Ptr("rzamfwghybpx"),
		// 							},
		// 						},
		// 						ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
		// 							ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
		// 							Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
		// 								{
		// 									ID: to.Ptr("fmheufuaqonfvirwrpd"),
		// 									Name: to.Ptr("bndxuxx"),
		// 									Type: to.Ptr("cmeam"),
		// 									Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
		// 										Type: to.Ptr("pgjilctjjwaa"),
		// 										AutoUpgradeMinorVersion: to.Ptr(true),
		// 										EnableAutomaticUpgrade: to.Ptr(true),
		// 										ForceUpdateTag: to.Ptr("yhgxw"),
		// 										ProtectedSettings: map[string]any{
		// 										},
		// 										ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
		// 											SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
		// 											SourceVault: &armcomputefleet.SubResource{
		// 												ID: to.Ptr("groxwd"),
		// 											},
		// 										},
		// 										ProvisionAfterExtensions: []*string{
		// 											to.Ptr("nftzosroolbcwmpupujzqwqe")},
		// 											ProvisioningState: to.Ptr("Succeeded"),
		// 											Publisher: to.Ptr("kpxtirxjfprhs"),
		// 											Settings: map[string]any{
		// 											},
		// 											SuppressFailures: to.Ptr(true),
		// 											TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
		// 										},
		// 								}},
		// 							},
		// 							HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
		// 								VMSizeProperties: &armcomputefleet.VMSizeProperties{
		// 									VCPUsAvailable: to.Ptr[int32](16),
		// 									VCPUsPerCore: to.Ptr[int32](23),
		// 								},
		// 							},
		// 							LicenseType: to.Ptr("v"),
		// 							NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
		// 								HealthProbe: &armcomputefleet.APIEntityReference{
		// 									ID: to.Ptr("cmkfcjhmrwxwqtac"),
		// 								},
		// 								NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
		// 								NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
		// 									{
		// 										Name: to.Ptr("i"),
		// 										Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
		// 											AuxiliaryMode: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
		// 											AuxiliarySKU: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
		// 											DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
		// 											DisableTCPStateTracking: to.Ptr(true),
		// 											DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
		// 												DNSServers: []*string{
		// 													to.Ptr("nxmmfolhclsesu")},
		// 												},
		// 												EnableAcceleratedNetworking: to.Ptr(true),
		// 												EnableFpga: to.Ptr(true),
		// 												EnableIPForwarding: to.Ptr(true),
		// 												IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
		// 													{
		// 														Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
		// 														Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
		// 															ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															ApplicationSecurityGroups: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
		// 																{
		// 																	ID: to.Ptr("groxwd"),
		// 															}},
		// 															Primary: to.Ptr(true),
		// 															PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
		// 															PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
		// 																Name: to.Ptr("fvpqf"),
		// 																Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
		// 																	DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
		// 																	DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
		// 																		DomainNameLabel: to.Ptr("ukrddzvmorpmfsczjwtbvp"),
		// 																		DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
		// 																	},
		// 																	IdleTimeoutInMinutes: to.Ptr[int32](9),
		// 																	IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
		// 																		{
		// 																			IPTagType: to.Ptr("sddgsoemnzgqizale"),
		// 																			Tag: to.Ptr("wufmhrjsakbiaetyara"),
		// 																	}},
		// 																	PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
		// 																	PublicIPPrefix: &armcomputefleet.SubResource{
		// 																		ID: to.Ptr("groxwd"),
		// 																	},
		// 																},
		// 																SKU: &armcomputefleet.PublicIPAddressSKU{
		// 																	Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
		// 																	Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
		// 																},
		// 															},
		// 															Subnet: &armcomputefleet.APIEntityReference{
		// 																ID: to.Ptr("cmkfcjhmrwxwqtac"),
		// 															},
		// 														},
		// 												}},
		// 												NetworkSecurityGroup: &armcomputefleet.SubResource{
		// 													ID: to.Ptr("groxwd"),
		// 												},
		// 												Primary: to.Ptr(true),
		// 											},
		// 									}},
		// 								},
		// 								OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
		// 									AdminUsername: to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
		// 									AllowExtensionOperations: to.Ptr(true),
		// 									ComputerNamePrefix: to.Ptr("o"),
		// 									CustomData: to.Ptr("xjjib"),
		// 									LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
		// 										DisablePasswordAuthentication: to.Ptr(true),
		// 										EnableVMAgentPlatformUpdates: to.Ptr(true),
		// 										PatchSettings: &armcomputefleet.LinuxPatchSettings{
		// 											AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
		// 											AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
		// 												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
		// 												RebootSetting: to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
		// 											},
		// 											PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
		// 										},
		// 										ProvisionVMAgent: to.Ptr(true),
		// 										SSH: &armcomputefleet.SSHConfiguration{
		// 											PublicKeys: []*armcomputefleet.SSHPublicKey{
		// 												{
		// 													Path: to.Ptr("kmqz"),
		// 													KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
		// 											}},
		// 										},
		// 									},
		// 									RequireGuestProvisionSignal: to.Ptr(true),
		// 									Secrets: []*armcomputefleet.VaultSecretGroup{
		// 										{
		// 											SourceVault: &armcomputefleet.SubResource{
		// 												ID: to.Ptr("groxwd"),
		// 											},
		// 											VaultCertificates: []*armcomputefleet.VaultCertificate{
		// 												{
		// 													CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
		// 													CertificateURL: to.Ptr("tyldwkzafmnkvpo"),
		// 											}},
		// 									}},
		// 									WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
		// 										AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
		// 											{
		// 												ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
		// 												Content: to.Ptr("bubmqbxjkj"),
		// 												PassName: to.Ptr("OobeSystem"),
		// 												SettingName: to.Ptr(armcomputefleet.SettingNamesAutoLogon),
		// 										}},
		// 										EnableAutomaticUpdates: to.Ptr(true),
		// 										EnableVMAgentPlatformUpdates: to.Ptr(true),
		// 										PatchSettings: &armcomputefleet.PatchSettings{
		// 											AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
		// 											AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
		// 												BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
		// 												RebootSetting: to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
		// 											},
		// 											EnableHotpatching: to.Ptr(true),
		// 											PatchMode: to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
		// 										},
		// 										ProvisionVMAgent: to.Ptr(true),
		// 										TimeZone: to.Ptr("hlyjiqcfksgrpjrct"),
		// 										WinRM: &armcomputefleet.WinRMConfiguration{
		// 											Listeners: []*armcomputefleet.WinRMListener{
		// 												{
		// 													CertificateURL: to.Ptr("phwesineizrl"),
		// 													Protocol: to.Ptr(armcomputefleet.ProtocolTypesHTTP),
		// 											}},
		// 										},
		// 									},
		// 								},
		// 								ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
		// 									OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
		// 										Enable: to.Ptr(true),
		// 										NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
		// 									},
		// 									TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
		// 										Enable: to.Ptr(true),
		// 										NotBeforeTimeout: to.Ptr("iljppmmw"),
		// 									},
		// 								},
		// 								SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
		// 									ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
		// 										{
		// 											Name: to.Ptr("zudiuxzkgqhxaam"),
		// 											Type: to.Ptr("lpnynhnniohtotmkznxku"),
		// 											ID: to.Ptr("ovmtxndtfwvcxnw"),
		// 											Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
		// 											Tags: map[string]*string{
		// 												"key7356": to.Ptr("apuftleiygpnemfzryiop"),
		// 											},
		// 											Properties: &armcomputefleet.VirtualMachineExtensionProperties{
		// 												Type: to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
		// 												AutoUpgradeMinorVersion: to.Ptr(true),
		// 												EnableAutomaticUpgrade: to.Ptr(true),
		// 												ForceUpdateTag: to.Ptr("oriasdwawveilgusfrn"),
		// 												InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
		// 													Name: to.Ptr("ip"),
		// 													Type: to.Ptr("woadxvobquacooaujyg"),
		// 													Statuses: []*armcomputefleet.InstanceViewStatus{
		// 														{
		// 															Code: to.Ptr("kuehuahsdozupmjrtp"),
		// 															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
		// 															Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
		// 															Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
		// 															Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
		// 													}},
		// 													Substatuses: []*armcomputefleet.InstanceViewStatus{
		// 														{
		// 															Code: to.Ptr("kuehuahsdozupmjrtp"),
		// 															DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
		// 															Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
		// 															Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
		// 															Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
		// 													}},
		// 													TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
		// 												},
		// 												ProtectedSettings: map[string]any{
		// 												},
		// 												ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
		// 													SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
		// 													SourceVault: &armcomputefleet.SubResource{
		// 														ID: to.Ptr("groxwd"),
		// 													},
		// 												},
		// 												ProvisionAfterExtensions: []*string{
		// 													to.Ptr("lwsfavklrgzuwmyxscskt")},
		// 													ProvisioningState: to.Ptr("Succeeded"),
		// 													Publisher: to.Ptr("rxoajzb"),
		// 													Settings: map[string]any{
		// 													},
		// 													SuppressFailures: to.Ptr(true),
		// 													TypeHandlerVersion: to.Ptr("bvzbiibps"),
		// 												},
		// 										}},
		// 										ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
		// 									},
		// 									SecurityProfile: &armcomputefleet.SecurityProfile{
		// 										EncryptionAtHost: to.Ptr(true),
		// 										EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
		// 											UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
		// 										},
		// 										ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
		// 											Enabled: to.Ptr(true),
		// 											KeyIncarnationID: to.Ptr[int32](20),
		// 											Mode: to.Ptr(armcomputefleet.ModeAudit),
		// 										},
		// 										SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
		// 										UefiSettings: &armcomputefleet.UefiSettings{
		// 											SecureBootEnabled: to.Ptr(true),
		// 											VTpmEnabled: to.Ptr(true),
		// 										},
		// 									},
		// 									ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
		// 										ID: to.Ptr("qlkeeyskyr"),
		// 									},
		// 									StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
		// 										DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
		// 											{
		// 												Name: to.Ptr("eogiykmdmeikswxmigjws"),
		// 												Caching: to.Ptr(armcomputefleet.CachingTypesNone),
		// 												CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
		// 												DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
		// 												DiskIOPSReadWrite: to.Ptr[int64](27),
		// 												DiskMBpsReadWrite: to.Ptr[int64](2),
		// 												DiskSizeGB: to.Ptr[int32](6),
		// 												Lun: to.Ptr[int32](14),
		// 												ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
		// 													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 													},
		// 													SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
		// 														DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 															ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 														},
		// 														SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
		// 													},
		// 													StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
		// 												},
		// 												WriteAcceleratorEnabled: to.Ptr(true),
		// 										}},
		// 										DiskControllerType: to.Ptr("uzb"),
		// 										ImageReference: &armcomputefleet.ImageReference{
		// 											ID: to.Ptr("aiunknwgksu"),
		// 											CommunityGalleryImageID: to.Ptr("vlqe"),
		// 											ExactVersion: to.Ptr("zjbntmiskjexlr"),
		// 											Offer: to.Ptr("isxgumkarlkomp"),
		// 											Publisher: to.Ptr("mqxgwbiyjzmxavhbkd"),
		// 											SharedGalleryImageID: to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
		// 											SKU: to.Ptr("eojmppqcrnpmxirtp"),
		// 											Version: to.Ptr("wvpcqefgtmqdgltiuz"),
		// 										},
		// 										OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
		// 											Name: to.Ptr("wfttw"),
		// 											Caching: to.Ptr(armcomputefleet.CachingTypesNone),
		// 											CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
		// 											DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
		// 											DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
		// 												Option: to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
		// 												Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
		// 											},
		// 											DiskSizeGB: to.Ptr[int32](14),
		// 											Image: &armcomputefleet.VirtualHardDisk{
		// 												URI: to.Ptr("thqceubivdrjs"),
		// 											},
		// 											ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
		// 												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 												},
		// 												SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
		// 													DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
		// 														ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
		// 													},
		// 													SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
		// 												},
		// 												StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
		// 											},
		// 											OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
		// 											VhdContainers: []*string{
		// 												to.Ptr("tkzcwddtinkfpnfklatw")},
		// 												WriteAcceleratorEnabled: to.Ptr(true),
		// 											},
		// 										},
		// 										TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
		// 										UserData: to.Ptr("s"),
		// 									},
		// 									ComputeAPIVersion: to.Ptr("2023-07-01"),
		// 									PlatformFaultDomainCount: to.Ptr[int32](1),
		// 								},
		// 								ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
		// 								RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
		// 									AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
		// 									Capacity: to.Ptr[int32](20),
		// 									MinCapacity: to.Ptr[int32](10),
		// 								},
		// 								SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
		// 									AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
		// 									Capacity: to.Ptr[int32](20),
		// 									EvictionPolicy: to.Ptr(armcomputefleet.EvictionPolicyDelete),
		// 									Maintain: to.Ptr(true),
		// 									MaxPricePerVM: to.Ptr[float32](0.00865),
		// 									MinCapacity: to.Ptr[int32](10),
		// 								},
		// 								VMSizesProfile: []*armcomputefleet.VMSizeProfile{
		// 									{
		// 										Name: to.Ptr("Standard_d1_v2"),
		// 										Rank: to.Ptr[int32](19225),
		// 								}},
		// 							},
		// 							Zones: []*string{
		// 								to.Ptr("zone1"),
		// 								to.Ptr("zone2")},
		// 						}},
		// 					}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
func ExampleFleetsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewFleetsClient().Get(ctx, "rgazurefleet", "testFleet", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Fleet = armcomputefleet.Fleet{
	// 	Name: to.Ptr("testFleet"),
	// 	Type: to.Ptr("Microsoft.AzureFleet/fleets"),
	// 	ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
	// 	SystemData: &armcomputefleet.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		CreatedBy: to.Ptr("rowegentrpoajsv"),
	// 		CreatedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
	// 		LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 		"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
	// 	},
	// 	Identity: &armcomputefleet.ManagedServiceIdentity{
	// 		Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
	// 		PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		TenantID: to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
	// 			"key9851": &armcomputefleet.UserAssignedIdentity{
	// 				ClientID: to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 				PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 			},
	// 		},
	// 	},
	// 	Properties: &armcomputefleet.FleetProperties{
	// 		ComputeProfile: &armcomputefleet.ComputeProfile{
	// 			BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
	// 				ApplicationProfile: &armcomputefleet.ApplicationProfile{
	// 					GalleryApplications: []*armcomputefleet.VMGalleryApplication{
	// 						{
	// 							ConfigurationReference: to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
	// 							EnableAutomaticUpgrade: to.Ptr(true),
	// 							Order: to.Ptr[int32](5),
	// 							PackageReferenceID: to.Ptr("lfxqiadouhmbovcd"),
	// 							Tags: to.Ptr("eyrqjbib"),
	// 							TreatFailureAsDeploymentFailure: to.Ptr(true),
	// 					}},
	// 				},
	// 				BillingProfile: &armcomputefleet.BillingProfile{
	// 					MaxPrice: to.Ptr[float64](2),
	// 				},
	// 				CapacityReservation: &armcomputefleet.CapacityReservationProfile{
	// 					CapacityReservationGroup: &armcomputefleet.SubResource{
	// 						ID: to.Ptr("groxwd"),
	// 					},
	// 				},
	// 				DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
	// 					BootDiagnostics: &armcomputefleet.BootDiagnostics{
	// 						Enabled: to.Ptr(true),
	// 						StorageURI: to.Ptr("rzamfwghybpx"),
	// 					},
	// 				},
	// 				EvictionPolicy: to.Ptr(armcomputefleet.VirtualMachineEvictionPolicyTypesDeallocate),
	// 				ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
	// 					ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
	// 					Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
	// 						{
	// 							ID: to.Ptr("fmheufuaqonfvirwrpd"),
	// 							Name: to.Ptr("bndxuxx"),
	// 							Type: to.Ptr("cmeam"),
	// 							Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
	// 								Type: to.Ptr("pgjilctjjwaa"),
	// 								AutoUpgradeMinorVersion: to.Ptr(true),
	// 								EnableAutomaticUpgrade: to.Ptr(true),
	// 								ForceUpdateTag: to.Ptr("yhgxw"),
	// 								ProtectedSettings: map[string]any{
	// 								},
	// 								ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 									SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 								},
	// 								ProvisionAfterExtensions: []*string{
	// 									to.Ptr("nftzosroolbcwmpupujzqwqe")},
	// 									ProvisioningState: to.Ptr("Succeeded"),
	// 									Publisher: to.Ptr("kpxtirxjfprhs"),
	// 									Settings: map[string]any{
	// 									},
	// 									SuppressFailures: to.Ptr(true),
	// 									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
	// 								},
	// 						}},
	// 					},
	// 					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
	// 						VMSizeProperties: &armcomputefleet.VMSizeProperties{
	// 							VCPUsAvailable: to.Ptr[int32](16),
	// 							VCPUsPerCore: to.Ptr[int32](23),
	// 						},
	// 					},
	// 					LicenseType: to.Ptr("v"),
	// 					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
	// 						HealthProbe: &armcomputefleet.APIEntityReference{
	// 							ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 						},
	// 						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
	// 						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
	// 							{
	// 								Name: to.Ptr("i"),
	// 								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
	// 									AuxiliaryMode: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
	// 									AuxiliarySKU: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
	// 									DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 									DisableTCPStateTracking: to.Ptr(true),
	// 									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
	// 										DNSServers: []*string{
	// 											to.Ptr("nxmmfolhclsesu")},
	// 										},
	// 										EnableAcceleratedNetworking: to.Ptr(true),
	// 										EnableFpga: to.Ptr(true),
	// 										EnableIPForwarding: to.Ptr(true),
	// 										IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
	// 											{
	// 												Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
	// 												Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
	// 													ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													ApplicationSecurityGroups: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													Primary: to.Ptr(true),
	// 													PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 													PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
	// 														Name: to.Ptr("fvpqf"),
	// 														Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
	// 															DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 															DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
	// 																DomainNameLabel: to.Ptr("ukrddzvmorpmfsczjwtbvp"),
	// 																DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
	// 															},
	// 															IdleTimeoutInMinutes: to.Ptr[int32](9),
	// 															IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
	// 																{
	// 																	IPTagType: to.Ptr("sddgsoemnzgqizale"),
	// 																	Tag: to.Ptr("wufmhrjsakbiaetyara"),
	// 															}},
	// 															PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 															PublicIPPrefix: &armcomputefleet.SubResource{
	// 																ID: to.Ptr("groxwd"),
	// 															},
	// 														},
	// 														SKU: &armcomputefleet.PublicIPAddressSKU{
	// 															Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
	// 															Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
	// 														},
	// 													},
	// 													Subnet: &armcomputefleet.APIEntityReference{
	// 														ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 													},
	// 												},
	// 										}},
	// 										NetworkSecurityGroup: &armcomputefleet.SubResource{
	// 											ID: to.Ptr("groxwd"),
	// 										},
	// 										Primary: to.Ptr(true),
	// 									},
	// 							}},
	// 						},
	// 						OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
	// 							AdminUsername: to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
	// 							AllowExtensionOperations: to.Ptr(true),
	// 							ComputerNamePrefix: to.Ptr("o"),
	// 							CustomData: to.Ptr("xjjib"),
	// 							LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
	// 								DisablePasswordAuthentication: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.LinuxPatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								SSH: &armcomputefleet.SSHConfiguration{
	// 									PublicKeys: []*armcomputefleet.SSHPublicKey{
	// 										{
	// 											Path: to.Ptr("kmqz"),
	// 											KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
	// 									}},
	// 								},
	// 							},
	// 							RequireGuestProvisionSignal: to.Ptr(true),
	// 							Secrets: []*armcomputefleet.VaultSecretGroup{
	// 								{
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 									VaultCertificates: []*armcomputefleet.VaultCertificate{
	// 										{
	// 											CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
	// 											CertificateURL: to.Ptr("tyldwkzafmnkvpo"),
	// 									}},
	// 							}},
	// 							WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
	// 								AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
	// 									{
	// 										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
	// 										Content: to.Ptr("bubmqbxjkj"),
	// 										PassName: to.Ptr("OobeSystem"),
	// 										SettingName: to.Ptr(armcomputefleet.SettingNamesAutoLogon),
	// 								}},
	// 								EnableAutomaticUpdates: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.PatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									EnableHotpatching: to.Ptr(true),
	// 									PatchMode: to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								TimeZone: to.Ptr("hlyjiqcfksgrpjrct"),
	// 								WinRM: &armcomputefleet.WinRMConfiguration{
	// 									Listeners: []*armcomputefleet.WinRMListener{
	// 										{
	// 											CertificateURL: to.Ptr("phwesineizrl"),
	// 											Protocol: to.Ptr(armcomputefleet.ProtocolTypesHTTP),
	// 									}},
	// 								},
	// 							},
	// 						},
	// 						Priority: to.Ptr(armcomputefleet.VirtualMachinePriorityTypesRegular),
	// 						ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
	// 							OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
	// 							},
	// 							TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("iljppmmw"),
	// 							},
	// 						},
	// 						SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
	// 							ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
	// 								{
	// 									Name: to.Ptr("zudiuxzkgqhxaam"),
	// 									Type: to.Ptr("lpnynhnniohtotmkznxku"),
	// 									ID: to.Ptr("ovmtxndtfwvcxnw"),
	// 									Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
	// 									Tags: map[string]*string{
	// 										"key7356": to.Ptr("apuftleiygpnemfzryiop"),
	// 									},
	// 									Properties: &armcomputefleet.VirtualMachineExtensionProperties{
	// 										Type: to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
	// 										AutoUpgradeMinorVersion: to.Ptr(true),
	// 										EnableAutomaticUpgrade: to.Ptr(true),
	// 										ForceUpdateTag: to.Ptr("oriasdwawveilgusfrn"),
	// 										InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
	// 											Name: to.Ptr("ip"),
	// 											Type: to.Ptr("woadxvobquacooaujyg"),
	// 											Statuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											Substatuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
	// 										},
	// 										ProtectedSettings: map[string]any{
	// 										},
	// 										ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 											SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 											SourceVault: &armcomputefleet.SubResource{
	// 												ID: to.Ptr("groxwd"),
	// 											},
	// 										},
	// 										ProvisionAfterExtensions: []*string{
	// 											to.Ptr("lwsfavklrgzuwmyxscskt")},
	// 											ProvisioningState: to.Ptr("Succeeded"),
	// 											Publisher: to.Ptr("rxoajzb"),
	// 											Settings: map[string]any{
	// 											},
	// 											SuppressFailures: to.Ptr(true),
	// 											TypeHandlerVersion: to.Ptr("bvzbiibps"),
	// 										},
	// 								}},
	// 								ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
	// 							},
	// 							SecurityProfile: &armcomputefleet.SecurityProfile{
	// 								EncryptionAtHost: to.Ptr(true),
	// 								EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
	// 									UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
	// 								},
	// 								ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
	// 									Enabled: to.Ptr(true),
	// 									KeyIncarnationID: to.Ptr[int32](20),
	// 									Mode: to.Ptr(armcomputefleet.ModeAudit),
	// 								},
	// 								SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
	// 								UefiSettings: &armcomputefleet.UefiSettings{
	// 									SecureBootEnabled: to.Ptr(true),
	// 									VTpmEnabled: to.Ptr(true),
	// 								},
	// 							},
	// 							ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
	// 								ID: to.Ptr("qlkeeyskyr"),
	// 							},
	// 							StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
	// 								DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
	// 									{
	// 										Name: to.Ptr("eogiykmdmeikswxmigjws"),
	// 										Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 										CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 										DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 										DiskIOPSReadWrite: to.Ptr[int64](27),
	// 										DiskMBpsReadWrite: to.Ptr[int64](2),
	// 										DiskSizeGB: to.Ptr[int32](6),
	// 										Lun: to.Ptr[int32](14),
	// 										ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 												},
	// 												SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 											},
	// 											StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 										},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 								}},
	// 								DiskControllerType: to.Ptr("uzb"),
	// 								ImageReference: &armcomputefleet.ImageReference{
	// 									ID: to.Ptr("aiunknwgksu"),
	// 									CommunityGalleryImageID: to.Ptr("vlqe"),
	// 									ExactVersion: to.Ptr("zjbntmiskjexlr"),
	// 									Offer: to.Ptr("isxgumkarlkomp"),
	// 									Publisher: to.Ptr("mqxgwbiyjzmxavhbkd"),
	// 									SharedGalleryImageID: to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
	// 									SKU: to.Ptr("eojmppqcrnpmxirtp"),
	// 									Version: to.Ptr("wvpcqefgtmqdgltiuz"),
	// 								},
	// 								OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
	// 									Name: to.Ptr("wfttw"),
	// 									Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 									CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 									DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 									DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
	// 										Option: to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
	// 										Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
	// 									},
	// 									DiskSizeGB: to.Ptr[int32](14),
	// 									Image: &armcomputefleet.VirtualHardDisk{
	// 										URI: to.Ptr("thqceubivdrjs"),
	// 									},
	// 									ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 										},
	// 										SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 										},
	// 										StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 									},
	// 									OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
	// 									VhdContainers: []*string{
	// 										to.Ptr("tkzcwddtinkfpnfklatw")},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 									},
	// 								},
	// 								TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 								UserData: to.Ptr("s"),
	// 							},
	// 							ComputeAPIVersion: to.Ptr("2023-07-01"),
	// 							PlatformFaultDomainCount: to.Ptr[int32](1),
	// 						},
	// 						ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
	// 						RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
	// 							Capacity: to.Ptr[int32](20),
	// 							MinCapacity: to.Ptr[int32](10),
	// 						},
	// 						SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
	// 							Capacity: to.Ptr[int32](20),
	// 							EvictionPolicy: to.Ptr(armcomputefleet.EvictionPolicyDelete),
	// 							Maintain: to.Ptr(true),
	// 							MaxPricePerVM: to.Ptr[float32](0.00865),
	// 							MinCapacity: to.Ptr[int32](10),
	// 						},
	// 						VMSizesProfile: []*armcomputefleet.VMSizeProfile{
	// 							{
	// 								Name: to.Ptr("Standard_d1_v2"),
	// 								Rank: to.Ptr[int32](19225),
	// 						}},
	// 					},
	// 					Zones: []*string{
	// 						to.Ptr("zone1"),
	// 						to.Ptr("zone2")},
	// 					}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json
func ExampleFleetsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-Id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewFleetsClient().BeginCreateOrUpdate(ctx, "testRg", "testFleet", armcomputefleet.Fleet{
		Location: to.Ptr("eastus2euap"),
		Properties: &armcomputefleet.FleetProperties{
			ComputeProfile: &armcomputefleet.ComputeProfile{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwentyTwo0701),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("vnNameTest"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableAcceleratedNetworking: to.Ptr(false),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("vmNameTest"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("/subscriptions/<subscription-Id>/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbNameTest/backendAddressPools/lbNameTest"),
													}},
												Primary:                 to.Ptr(true),
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("/subscriptions/<subscription-Id>/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnNameTest/subnets/default"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminPassword:            to.Ptr("testPassword"),
						AdminUsername:            to.Ptr("testUserName"),
						ComputerNamePrefix:       to.Ptr("vmNameTest"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(false),
						},
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcomputefleet.ImageReference{
							Offer:                   to.Ptr("0001-com-ubuntu-server-focal"),
							Publisher:               to.Ptr("canonical"),
							SKU:                     to.Ptr("20_04-lts-gen2"),
							Version:                 to.Ptr("latest"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcomputefleet.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesLinux),
						},
					},
				},
				ComputeAPIVersion:        to.Ptr("2023-09-01"),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](2),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MinCapacity:        to.Ptr[int32](1),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_F1s"),
				},
				{
					Name: to.Ptr("Standard_F2s"),
				},
				{
					Name: to.Ptr("Standard_D2s_v3"),
				},
			},
		},
		Zones: []*string{
			to.Ptr("1")},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Fleet = armcomputefleet.Fleet{
	// 	Name: to.Ptr("testFleet"),
	// 	Type: to.Ptr("Microsoft.AzureFleet/fleets"),
	// 	ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
	// 	SystemData: &armcomputefleet.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		CreatedBy: to.Ptr("rowegentrpoajsv"),
	// 		CreatedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
	// 		LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 		"key3518": to.Ptr("luvrnuvsgdpbuofdskkcoqhfh"),
	// 	},
	// 	Identity: &armcomputefleet.ManagedServiceIdentity{
	// 		Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
	// 		PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		TenantID: to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
	// 			"key9851": &armcomputefleet.UserAssignedIdentity{
	// 				ClientID: to.Ptr("7d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 				PrincipalID: to.Ptr("6d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 			},
	// 		},
	// 	},
	// 	Properties: &armcomputefleet.FleetProperties{
	// 		ComputeProfile: &armcomputefleet.ComputeProfile{
	// 			BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
	// 				ApplicationProfile: &armcomputefleet.ApplicationProfile{
	// 					GalleryApplications: []*armcomputefleet.VMGalleryApplication{
	// 						{
	// 							ConfigurationReference: to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
	// 							EnableAutomaticUpgrade: to.Ptr(true),
	// 							Order: to.Ptr[int32](5),
	// 							PackageReferenceID: to.Ptr("lfxqiadouhmbovcd"),
	// 							Tags: to.Ptr("eyrqjbib"),
	// 							TreatFailureAsDeploymentFailure: to.Ptr(true),
	// 					}},
	// 				},
	// 				CapacityReservation: &armcomputefleet.CapacityReservationProfile{
	// 					CapacityReservationGroup: &armcomputefleet.SubResource{
	// 						ID: to.Ptr("groxwd"),
	// 					},
	// 				},
	// 				DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
	// 					BootDiagnostics: &armcomputefleet.BootDiagnostics{
	// 						Enabled: to.Ptr(true),
	// 						StorageURI: to.Ptr("rzamfwghybpx"),
	// 					},
	// 				},
	// 				ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
	// 					ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
	// 					Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
	// 						{
	// 							ID: to.Ptr("fmheufuaqonfvirwrpd"),
	// 							Name: to.Ptr("bndxuxx"),
	// 							Type: to.Ptr("cmeam"),
	// 							Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
	// 								Type: to.Ptr("pgjilctjjwaa"),
	// 								AutoUpgradeMinorVersion: to.Ptr(true),
	// 								EnableAutomaticUpgrade: to.Ptr(true),
	// 								ForceUpdateTag: to.Ptr("yhgxw"),
	// 								ProtectedSettings: map[string]any{
	// 								},
	// 								ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 									SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 								},
	// 								ProvisionAfterExtensions: []*string{
	// 									to.Ptr("nftzosroolbcwmpupujzqwqe")},
	// 									ProvisioningState: to.Ptr("Succeeded"),
	// 									Publisher: to.Ptr("kpxtirxjfprhs"),
	// 									Settings: map[string]any{
	// 									},
	// 									SuppressFailures: to.Ptr(true),
	// 									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
	// 								},
	// 						}},
	// 					},
	// 					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
	// 						VMSizeProperties: &armcomputefleet.VMSizeProperties{
	// 							VCPUsAvailable: to.Ptr[int32](16),
	// 							VCPUsPerCore: to.Ptr[int32](23),
	// 						},
	// 					},
	// 					LicenseType: to.Ptr("v"),
	// 					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
	// 						HealthProbe: &armcomputefleet.APIEntityReference{
	// 							ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 						},
	// 						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
	// 						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
	// 							{
	// 								Name: to.Ptr("i"),
	// 								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
	// 									AuxiliaryMode: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
	// 									AuxiliarySKU: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
	// 									DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 									DisableTCPStateTracking: to.Ptr(true),
	// 									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
	// 										DNSServers: []*string{
	// 											to.Ptr("nxmmfolhclsesu")},
	// 										},
	// 										EnableAcceleratedNetworking: to.Ptr(true),
	// 										EnableFpga: to.Ptr(true),
	// 										EnableIPForwarding: to.Ptr(true),
	// 										IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
	// 											{
	// 												Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
	// 												Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
	// 													ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													ApplicationSecurityGroups: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													Primary: to.Ptr(true),
	// 													PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 													PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
	// 														Name: to.Ptr("fvpqf"),
	// 														Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
	// 															DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 															DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
	// 																DomainNameLabel: to.Ptr("ukrddzvmorpmfsczjwtbvp"),
	// 																DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
	// 															},
	// 															IdleTimeoutInMinutes: to.Ptr[int32](9),
	// 															IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
	// 																{
	// 																	IPTagType: to.Ptr("sddgsoemnzgqizale"),
	// 																	Tag: to.Ptr("wufmhrjsakbiaetyara"),
	// 															}},
	// 															PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 															PublicIPPrefix: &armcomputefleet.SubResource{
	// 																ID: to.Ptr("groxwd"),
	// 															},
	// 														},
	// 														SKU: &armcomputefleet.PublicIPAddressSKU{
	// 															Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
	// 															Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
	// 														},
	// 													},
	// 													Subnet: &armcomputefleet.APIEntityReference{
	// 														ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 													},
	// 												},
	// 										}},
	// 										NetworkSecurityGroup: &armcomputefleet.SubResource{
	// 											ID: to.Ptr("groxwd"),
	// 										},
	// 										Primary: to.Ptr(true),
	// 									},
	// 							}},
	// 						},
	// 						OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
	// 							AdminUsername: to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
	// 							AllowExtensionOperations: to.Ptr(true),
	// 							ComputerNamePrefix: to.Ptr("o"),
	// 							LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
	// 								DisablePasswordAuthentication: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.LinuxPatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								SSH: &armcomputefleet.SSHConfiguration{
	// 									PublicKeys: []*armcomputefleet.SSHPublicKey{
	// 										{
	// 											Path: to.Ptr("kmqz"),
	// 											KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
	// 									}},
	// 								},
	// 							},
	// 							RequireGuestProvisionSignal: to.Ptr(true),
	// 							Secrets: []*armcomputefleet.VaultSecretGroup{
	// 								{
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 									VaultCertificates: []*armcomputefleet.VaultCertificate{
	// 										{
	// 											CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
	// 											CertificateURL: to.Ptr("tyldwkzafmnkvpo"),
	// 									}},
	// 							}},
	// 							WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
	// 								AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
	// 									{
	// 										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
	// 										PassName: to.Ptr("OobeSystem"),
	// 										SettingName: to.Ptr(armcomputefleet.SettingNamesAutoLogon),
	// 								}},
	// 								EnableAutomaticUpdates: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.PatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									EnableHotpatching: to.Ptr(true),
	// 									PatchMode: to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								TimeZone: to.Ptr("hlyjiqcfksgrpjrct"),
	// 								WinRM: &armcomputefleet.WinRMConfiguration{
	// 									Listeners: []*armcomputefleet.WinRMListener{
	// 										{
	// 											CertificateURL: to.Ptr("phwesineizrl"),
	// 											Protocol: to.Ptr(armcomputefleet.ProtocolTypesHTTP),
	// 									}},
	// 								},
	// 							},
	// 						},
	// 						ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
	// 							OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
	// 							},
	// 							TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("iljppmmw"),
	// 							},
	// 						},
	// 						SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
	// 							ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
	// 								{
	// 									Name: to.Ptr("zudiuxzkgqhxaam"),
	// 									Type: to.Ptr("lpnynhnniohtotmkznxku"),
	// 									ID: to.Ptr("ovmtxndtfwvcxnw"),
	// 									Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
	// 									Tags: map[string]*string{
	// 										"key7356": to.Ptr("apuftleiygpnemfzryiop"),
	// 									},
	// 									Properties: &armcomputefleet.VirtualMachineExtensionProperties{
	// 										Type: to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
	// 										AutoUpgradeMinorVersion: to.Ptr(true),
	// 										EnableAutomaticUpgrade: to.Ptr(true),
	// 										ForceUpdateTag: to.Ptr("oriasdwawveilgusfrn"),
	// 										InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
	// 											Name: to.Ptr("ip"),
	// 											Type: to.Ptr("woadxvobquacooaujyg"),
	// 											Statuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											Substatuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
	// 										},
	// 										ProtectedSettings: map[string]any{
	// 										},
	// 										ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 											SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 											SourceVault: &armcomputefleet.SubResource{
	// 												ID: to.Ptr("groxwd"),
	// 											},
	// 										},
	// 										ProvisionAfterExtensions: []*string{
	// 											to.Ptr("lwsfavklrgzuwmyxscskt")},
	// 											ProvisioningState: to.Ptr("Succeeded"),
	// 											Publisher: to.Ptr("rxoajzb"),
	// 											Settings: map[string]any{
	// 											},
	// 											SuppressFailures: to.Ptr(true),
	// 											TypeHandlerVersion: to.Ptr("bvzbiibps"),
	// 										},
	// 								}},
	// 								ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
	// 							},
	// 							SecurityProfile: &armcomputefleet.SecurityProfile{
	// 								EncryptionAtHost: to.Ptr(true),
	// 								EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
	// 									UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
	// 								},
	// 								ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
	// 									Enabled: to.Ptr(true),
	// 									KeyIncarnationID: to.Ptr[int32](20),
	// 									Mode: to.Ptr(armcomputefleet.ModeAudit),
	// 								},
	// 								SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
	// 								UefiSettings: &armcomputefleet.UefiSettings{
	// 									SecureBootEnabled: to.Ptr(true),
	// 									VTpmEnabled: to.Ptr(true),
	// 								},
	// 							},
	// 							ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
	// 								ID: to.Ptr("qlkeeyskyr"),
	// 							},
	// 							StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
	// 								DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
	// 									{
	// 										Name: to.Ptr("eogiykmdmeikswxmigjws"),
	// 										Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 										CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 										DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 										DiskIOPSReadWrite: to.Ptr[int64](27),
	// 										DiskMBpsReadWrite: to.Ptr[int64](2),
	// 										DiskSizeGB: to.Ptr[int32](6),
	// 										Lun: to.Ptr[int32](14),
	// 										ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 												},
	// 												SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 											},
	// 											StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 										},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 								}},
	// 								DiskControllerType: to.Ptr("uzb"),
	// 								ImageReference: &armcomputefleet.ImageReference{
	// 									ID: to.Ptr("aiunknwgksu"),
	// 									CommunityGalleryImageID: to.Ptr("vlqe"),
	// 									ExactVersion: to.Ptr("zjbntmiskjexlr"),
	// 									Offer: to.Ptr("isxgumkarlkomp"),
	// 									Publisher: to.Ptr("mqxgwbiyjzmxavhbkd"),
	// 									SharedGalleryImageID: to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
	// 									SKU: to.Ptr("eojmppqcrnpmxirtp"),
	// 									Version: to.Ptr("wvpcqefgtmqdgltiuz"),
	// 								},
	// 								OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
	// 									Name: to.Ptr("wfttw"),
	// 									Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 									CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 									DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 									DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
	// 										Option: to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
	// 										Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
	// 									},
	// 									DiskSizeGB: to.Ptr[int32](14),
	// 									Image: &armcomputefleet.VirtualHardDisk{
	// 										URI: to.Ptr("thqceubivdrjs"),
	// 									},
	// 									ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 										},
	// 										SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 										},
	// 										StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 									},
	// 									OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
	// 									VhdContainers: []*string{
	// 										to.Ptr("tkzcwddtinkfpnfklatw")},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 									},
	// 								},
	// 								TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 								UserData: to.Ptr("s"),
	// 							},
	// 							ComputeAPIVersion: to.Ptr("2023-07-01"),
	// 							PlatformFaultDomainCount: to.Ptr[int32](1),
	// 						},
	// 						ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
	// 						RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
	// 							Capacity: to.Ptr[int32](10),
	// 							MinCapacity: to.Ptr[int32](10),
	// 						},
	// 						SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
	// 							Capacity: to.Ptr[int32](10),
	// 							EvictionPolicy: to.Ptr(armcomputefleet.EvictionPolicyDelete),
	// 							Maintain: to.Ptr(true),
	// 							MaxPricePerVM: to.Ptr[float32](0.00865),
	// 							MinCapacity: to.Ptr[int32](20),
	// 						},
	// 						VMSizesProfile: []*armcomputefleet.VMSizeProfile{
	// 							{
	// 								Name: to.Ptr("Standard_d1_v2"),
	// 								Rank: to.Ptr[int32](19225),
	// 						}},
	// 					},
	// 					Zones: []*string{
	// 						to.Ptr("zone1"),
	// 						to.Ptr("zone2")},
	// 					}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json
func ExampleFleetsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewFleetsClient().BeginUpdate(ctx, "rgazurefleet", "testFleet", armcomputefleet.FleetUpdate{
		Identity: &armcomputefleet.ManagedServiceIdentityUpdate{
			Type:                   to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{},
		},
		Plan: &armcomputefleet.ResourcePlanUpdate{
			Name:          to.Ptr("jwgrcrnrtfoxn"),
			Product:       to.Ptr("cgopbyvdyqikahwyxfpzwaqk"),
			PromotionCode: to.Ptr("naglezezplcaruqogtxnuizslqnnbr"),
			Publisher:     to.Ptr("iozjbiqqckqm"),
			Version:       to.Ptr("wa"),
		},
		Properties: &armcomputefleet.FleetPropertiesUpdate{
			ComputeProfile: &armcomputefleet.ComputeProfileUpdate{
				BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcomputefleet.ApplicationProfile{
						GalleryApplications: []*armcomputefleet.VMGalleryApplication{
							{
								ConfigurationReference:          to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
								EnableAutomaticUpgrade:          to.Ptr(true),
								Order:                           to.Ptr[int32](5),
								PackageReferenceID:              to.Ptr("lfxqiadouhmbovcd"),
								Tags:                            to.Ptr("eyrqjbib"),
								TreatFailureAsDeploymentFailure: to.Ptr(true),
							}},
					},
					CapacityReservation: &armcomputefleet.CapacityReservationProfile{
						CapacityReservationGroup: &armcomputefleet.SubResource{
							ID: to.Ptr("groxwd"),
						},
					},
					DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
						BootDiagnostics: &armcomputefleet.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("rzamfwghybpx"),
						},
					},
					ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
						Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("bndxuxx"),
								Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("pgjilctjjwaa"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("yhgxw"),
									ProtectedSettings:       map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("nftzosroolbcwmpupujzqwqe")},
									Publisher:          to.Ptr("kpxtirxjfprhs"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
								},
							}},
					},
					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcomputefleet.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](16),
							VCPUsPerCore:   to.Ptr[int32](23),
						},
					},
					LicenseType: to.Ptr("v"),
					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
						HealthProbe: &armcomputefleet.APIEntityReference{
							ID: to.Ptr("cmkfcjhmrwxwqtac"),
						},
						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("i"),
								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
									AuxiliaryMode:           to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
									AuxiliarySKU:            to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
									DeleteOption:            to.Ptr(armcomputefleet.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{
											to.Ptr("nxmmfolhclsesu")},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
											Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												ApplicationSecurityGroups: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
													{
														ID: to.Ptr("groxwd"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("fvpqf"),
													Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
														DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel:      to.Ptr("ukrddzvmorpmfsczjwtbvp"),
															DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](9),
														IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("sddgsoemnzgqizale"),
																Tag:       to.Ptr("wufmhrjsakbiaetyara"),
															}},
														PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
														PublicIPPrefix: &armcomputefleet.SubResource{
															ID: to.Ptr("groxwd"),
														},
													},
													SKU: &armcomputefleet.PublicIPAddressSKU{
														Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcomputefleet.APIEntityReference{
													ID: to.Ptr("cmkfcjhmrwxwqtac"),
												},
											},
										}},
									NetworkSecurityGroup: &armcomputefleet.SubResource{
										ID: to.Ptr("groxwd"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
						AdminPassword:            to.Ptr("adfbrdxpv"),
						AdminUsername:            to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerNamePrefix:       to.Ptr("o"),
						CustomData:               to.Ptr("xjjib"),
						LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							EnableVMAgentPlatformUpdates:  to.Ptr(true),
							PatchSettings: &armcomputefleet.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcomputefleet.SSHConfiguration{
								PublicKeys: []*armcomputefleet.SSHPublicKey{
									{
										Path:    to.Ptr("kmqz"),
										KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets: []*armcomputefleet.VaultSecretGroup{
							{
								SourceVault: &armcomputefleet.SubResource{
									ID: to.Ptr("groxwd"),
								},
								VaultCertificates: []*armcomputefleet.VaultCertificate{
									{
										CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
										CertificateURL:   to.Ptr("tyldwkzafmnkvpo"),
									}},
							}},
						WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
							AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("bubmqbxjkj"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcomputefleet.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates:       to.Ptr(true),
							EnableVMAgentPlatformUpdates: to.Ptr(true),
							PatchSettings: &armcomputefleet.PatchSettings{
								AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
								AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
									BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
									RebootSetting:                            to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
								},
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("hlyjiqcfksgrpjrct"),
							WinRM: &armcomputefleet.WinRMConfiguration{
								Listeners: []*armcomputefleet.WinRMListener{
									{
										CertificateURL: to.Ptr("phwesineizrl"),
										Protocol:       to.Ptr(armcomputefleet.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
						},
						TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("iljppmmw"),
						},
					},
					SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
						ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
							{
								Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
								Tags:     map[string]*string{},
								Properties: &armcomputefleet.VirtualMachineExtensionProperties{
									Type:                    to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("oriasdwawveilgusfrn"),
									InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
										Name: to.Ptr("ip"),
										Type: to.Ptr("woadxvobquacooaujyg"),
										Statuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										Substatuses: []*armcomputefleet.InstanceViewStatus{
											{
												Code:          to.Ptr("kuehuahsdozupmjrtp"),
												DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
												Level:         to.Ptr(armcomputefleet.StatusLevelTypesInfo),
												Message:       to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
												Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t }()),
											}},
										TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
									},
									ProtectedSettings: map[string]any{},
									ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
										SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
										SourceVault: &armcomputefleet.SubResource{
											ID: to.Ptr("groxwd"),
										},
									},
									ProvisionAfterExtensions: []*string{
										to.Ptr("lwsfavklrgzuwmyxscskt")},
									Publisher:          to.Ptr("rxoajzb"),
									Settings:           map[string]any{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("bvzbiibps"),
								},
							}},
						ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
					},
					SecurityProfile: &armcomputefleet.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
							UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
						},
						ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
							Enabled:          to.Ptr(true),
							KeyIncarnationID: to.Ptr[int32](20),
							Mode:             to.Ptr(armcomputefleet.ModeAudit),
						},
						SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
						UefiSettings: &armcomputefleet.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
						ID: to.Ptr("qlkeeyskyr"),
					},
					StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("eogiykmdmeikswxmigjws"),
								Caching:           to.Ptr(armcomputefleet.CachingTypesNone),
								CreateOption:      to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
								DeleteOption:      to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
								DiskIOPSReadWrite: to.Ptr[int64](27),
								DiskMBpsReadWrite: to.Ptr[int64](2),
								DiskSizeGB:        to.Ptr[int32](6),
								Lun:               to.Ptr[int32](14),
								ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
										},
										SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						DiskControllerType: to.Ptr("uzb"),
						ImageReference: &armcomputefleet.ImageReference{
							ID:                      to.Ptr("aiunknwgksu"),
							CommunityGalleryImageID: to.Ptr("vlqe"),
							Offer:                   to.Ptr("isxgumkarlkomp"),
							Publisher:               to.Ptr("mqxgwbiyjzmxavhbkd"),
							SharedGalleryImageID:    to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
							SKU:                     to.Ptr("eojmppqcrnpmxirtp"),
							Version:                 to.Ptr("wvpcqefgtmqdgltiuz"),
						},
						OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("wfttw"),
							Caching:      to.Ptr(armcomputefleet.CachingTypesNone),
							CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
								Option:    to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](14),
							Image: &armcomputefleet.VirtualHardDisk{
								URI: to.Ptr("thqceubivdrjs"),
							},
							ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
									ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
								},
								SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
										ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
									},
									SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
							VhdContainers: []*string{
								to.Ptr("tkzcwddtinkfpnfklatw")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("s"),
				},
				ComputeAPIVersion:        to.Ptr("2023-07-01"),
				PlatformFaultDomainCount: to.Ptr[int32](1),
			},
			RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
				Capacity:           to.Ptr[int32](20),
				MinCapacity:        to.Ptr[int32](10),
			},
			SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
				AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
				Capacity:           to.Ptr[int32](20),
				EvictionPolicy:     to.Ptr(armcomputefleet.EvictionPolicyDelete),
				Maintain:           to.Ptr(true),
				MaxPricePerVM:      to.Ptr[float32](0.00865),
				MinCapacity:        to.Ptr[int32](10),
			},
			VMSizesProfile: []*armcomputefleet.VMSizeProfile{
				{
					Name: to.Ptr("Standard_d1_v2"),
					Rank: to.Ptr[int32](19225),
				}},
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Fleet = armcomputefleet.Fleet{
	// 	Name: to.Ptr("testFleet"),
	// 	Type: to.Ptr("Microsoft.AzureFleet/fleets"),
	// 	ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/testFleet"),
	// 	SystemData: &armcomputefleet.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		CreatedBy: to.Ptr("rowegentrpoajsv"),
	// 		CreatedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("edwuayhhaoepxzisfaqjhmrxjq"),
	// 		LastModifiedByType: to.Ptr(armcomputefleet.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Identity: &armcomputefleet.ManagedServiceIdentity{
	// 		Type: to.Ptr(armcomputefleet.ManagedServiceIdentityTypeUserAssigned),
	// 		PrincipalID: to.Ptr("4d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		TenantID: to.Ptr("5d508e5b-374b-4382-9a1c-01fb8b6cb37c"),
	// 		UserAssignedIdentities: map[string]*armcomputefleet.UserAssignedIdentity{
	// 		},
	// 	},
	// 	Plan: &armcomputefleet.Plan{
	// 		Name: to.Ptr("uapfngmdekvpgjhomthtpxjfdmmll"),
	// 		Product: to.Ptr("bfzbkdnbexmedxdc"),
	// 		PromotionCode: to.Ptr("gspehogwfjxirz"),
	// 		Publisher: to.Ptr("aqhles"),
	// 		Version: to.Ptr("yza"),
	// 	},
	// 	Properties: &armcomputefleet.FleetProperties{
	// 		ComputeProfile: &armcomputefleet.ComputeProfile{
	// 			BaseVirtualMachineProfile: &armcomputefleet.VirtualMachineScaleSetVMProfile{
	// 				ApplicationProfile: &armcomputefleet.ApplicationProfile{
	// 					GalleryApplications: []*armcomputefleet.VMGalleryApplication{
	// 						{
	// 							ConfigurationReference: to.Ptr("ulztmiavpojpbpbddgnuuiimxcpau"),
	// 							EnableAutomaticUpgrade: to.Ptr(true),
	// 							Order: to.Ptr[int32](5),
	// 							PackageReferenceID: to.Ptr("lfxqiadouhmbovcd"),
	// 							Tags: to.Ptr("eyrqjbib"),
	// 							TreatFailureAsDeploymentFailure: to.Ptr(true),
	// 					}},
	// 				},
	// 				CapacityReservation: &armcomputefleet.CapacityReservationProfile{
	// 					CapacityReservationGroup: &armcomputefleet.SubResource{
	// 						ID: to.Ptr("groxwd"),
	// 					},
	// 				},
	// 				DiagnosticsProfile: &armcomputefleet.DiagnosticsProfile{
	// 					BootDiagnostics: &armcomputefleet.BootDiagnostics{
	// 						Enabled: to.Ptr(true),
	// 						StorageURI: to.Ptr("rzamfwghybpx"),
	// 					},
	// 				},
	// 				ExtensionProfile: &armcomputefleet.VirtualMachineScaleSetExtensionProfile{
	// 					ExtensionsTimeBudget: to.Ptr("mbhjahtdygwgyszdwjtvlvtgchdwil"),
	// 					Extensions: []*armcomputefleet.VirtualMachineScaleSetExtension{
	// 						{
	// 							ID: to.Ptr("fmheufuaqonfvirwrpd"),
	// 							Name: to.Ptr("bndxuxx"),
	// 							Type: to.Ptr("cmeam"),
	// 							Properties: &armcomputefleet.VirtualMachineScaleSetExtensionProperties{
	// 								Type: to.Ptr("pgjilctjjwaa"),
	// 								AutoUpgradeMinorVersion: to.Ptr(true),
	// 								EnableAutomaticUpgrade: to.Ptr(true),
	// 								ForceUpdateTag: to.Ptr("yhgxw"),
	// 								ProtectedSettings: map[string]any{
	// 								},
	// 								ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 									SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 								},
	// 								ProvisionAfterExtensions: []*string{
	// 									to.Ptr("nftzosroolbcwmpupujzqwqe")},
	// 									ProvisioningState: to.Ptr("Succeeded"),
	// 									Publisher: to.Ptr("kpxtirxjfprhs"),
	// 									Settings: map[string]any{
	// 									},
	// 									SuppressFailures: to.Ptr(true),
	// 									TypeHandlerVersion: to.Ptr("zevivcoilxmbwlrihhhibq"),
	// 								},
	// 						}},
	// 					},
	// 					HardwareProfile: &armcomputefleet.VirtualMachineScaleSetHardwareProfile{
	// 						VMSizeProperties: &armcomputefleet.VMSizeProperties{
	// 							VCPUsAvailable: to.Ptr[int32](16),
	// 							VCPUsPerCore: to.Ptr[int32](23),
	// 						},
	// 					},
	// 					LicenseType: to.Ptr("v"),
	// 					NetworkProfile: &armcomputefleet.VirtualMachineScaleSetNetworkProfile{
	// 						HealthProbe: &armcomputefleet.APIEntityReference{
	// 							ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 						},
	// 						NetworkAPIVersion: to.Ptr(armcomputefleet.NetworkAPIVersionTwoThousandTwenty1101),
	// 						NetworkInterfaceConfigurations: []*armcomputefleet.VirtualMachineScaleSetNetworkConfiguration{
	// 							{
	// 								Name: to.Ptr("i"),
	// 								Properties: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationProperties{
	// 									AuxiliaryMode: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliaryModeNone),
	// 									AuxiliarySKU: to.Ptr(armcomputefleet.NetworkInterfaceAuxiliarySKUNone),
	// 									DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 									DisableTCPStateTracking: to.Ptr(true),
	// 									DNSSettings: &armcomputefleet.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
	// 										DNSServers: []*string{
	// 											to.Ptr("nxmmfolhclsesu")},
	// 										},
	// 										EnableAcceleratedNetworking: to.Ptr(true),
	// 										EnableFpga: to.Ptr(true),
	// 										EnableIPForwarding: to.Ptr(true),
	// 										IPConfigurations: []*armcomputefleet.VirtualMachineScaleSetIPConfiguration{
	// 											{
	// 												Name: to.Ptr("oezqhkidfhyywlfzwuotilrpbqnjg"),
	// 												Properties: &armcomputefleet.VirtualMachineScaleSetIPConfigurationProperties{
	// 													ApplicationGatewayBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													ApplicationSecurityGroups: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerBackendAddressPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													LoadBalancerInboundNatPools: []*armcomputefleet.SubResource{
	// 														{
	// 															ID: to.Ptr("groxwd"),
	// 													}},
	// 													Primary: to.Ptr(true),
	// 													PrivateIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 													PublicIPAddressConfiguration: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfiguration{
	// 														Name: to.Ptr("fvpqf"),
	// 														Properties: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
	// 															DeleteOption: to.Ptr(armcomputefleet.DeleteOptionsDelete),
	// 															DNSSettings: &armcomputefleet.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
	// 																DomainNameLabel: to.Ptr("ukrddzvmorpmfsczjwtbvp"),
	// 																DomainNameLabelScope: to.Ptr(armcomputefleet.DomainNameLabelScopeTypesTenantReuse),
	// 															},
	// 															IdleTimeoutInMinutes: to.Ptr[int32](9),
	// 															IPTags: []*armcomputefleet.VirtualMachineScaleSetIPTag{
	// 																{
	// 																	IPTagType: to.Ptr("sddgsoemnzgqizale"),
	// 																	Tag: to.Ptr("wufmhrjsakbiaetyara"),
	// 															}},
	// 															PublicIPAddressVersion: to.Ptr(armcomputefleet.IPVersionIPv4),
	// 															PublicIPPrefix: &armcomputefleet.SubResource{
	// 																ID: to.Ptr("groxwd"),
	// 															},
	// 														},
	// 														SKU: &armcomputefleet.PublicIPAddressSKU{
	// 															Name: to.Ptr(armcomputefleet.PublicIPAddressSKUNameBasic),
	// 															Tier: to.Ptr(armcomputefleet.PublicIPAddressSKUTierRegional),
	// 														},
	// 													},
	// 													Subnet: &armcomputefleet.APIEntityReference{
	// 														ID: to.Ptr("cmkfcjhmrwxwqtac"),
	// 													},
	// 												},
	// 										}},
	// 										NetworkSecurityGroup: &armcomputefleet.SubResource{
	// 											ID: to.Ptr("groxwd"),
	// 										},
	// 										Primary: to.Ptr(true),
	// 									},
	// 							}},
	// 						},
	// 						OSProfile: &armcomputefleet.VirtualMachineScaleSetOSProfile{
	// 							AdminUsername: to.Ptr("nrgzqciiaaxjrqldbmjbqkyhntp"),
	// 							AllowExtensionOperations: to.Ptr(true),
	// 							ComputerNamePrefix: to.Ptr("o"),
	// 							LinuxConfiguration: &armcomputefleet.LinuxConfiguration{
	// 								DisablePasswordAuthentication: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.LinuxPatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.LinuxPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.LinuxVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									PatchMode: to.Ptr(armcomputefleet.LinuxVMGuestPatchModeImageDefault),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								SSH: &armcomputefleet.SSHConfiguration{
	// 									PublicKeys: []*armcomputefleet.SSHPublicKey{
	// 										{
	// 											Path: to.Ptr("kmqz"),
	// 											KeyData: to.Ptr("kivgsubusvpprwqaqpjcmhsv"),
	// 									}},
	// 								},
	// 							},
	// 							RequireGuestProvisionSignal: to.Ptr(true),
	// 							Secrets: []*armcomputefleet.VaultSecretGroup{
	// 								{
	// 									SourceVault: &armcomputefleet.SubResource{
	// 										ID: to.Ptr("groxwd"),
	// 									},
	// 									VaultCertificates: []*armcomputefleet.VaultCertificate{
	// 										{
	// 											CertificateStore: to.Ptr("nlxrwavpzhueffxsshlun"),
	// 											CertificateURL: to.Ptr("tyldwkzafmnkvpo"),
	// 									}},
	// 							}},
	// 							WindowsConfiguration: &armcomputefleet.WindowsConfiguration{
	// 								AdditionalUnattendContent: []*armcomputefleet.AdditionalUnattendContent{
	// 									{
	// 										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
	// 										PassName: to.Ptr("OobeSystem"),
	// 										SettingName: to.Ptr(armcomputefleet.SettingNamesAutoLogon),
	// 								}},
	// 								EnableAutomaticUpdates: to.Ptr(true),
	// 								EnableVMAgentPlatformUpdates: to.Ptr(true),
	// 								PatchSettings: &armcomputefleet.PatchSettings{
	// 									AssessmentMode: to.Ptr(armcomputefleet.WindowsPatchAssessmentModeImageDefault),
	// 									AutomaticByPlatformSettings: &armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformSettings{
	// 										BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
	// 										RebootSetting: to.Ptr(armcomputefleet.WindowsVMGuestPatchAutomaticByPlatformRebootSettingUnknown),
	// 									},
	// 									EnableHotpatching: to.Ptr(true),
	// 									PatchMode: to.Ptr(armcomputefleet.WindowsVMGuestPatchModeManual),
	// 								},
	// 								ProvisionVMAgent: to.Ptr(true),
	// 								TimeZone: to.Ptr("hlyjiqcfksgrpjrct"),
	// 								WinRM: &armcomputefleet.WinRMConfiguration{
	// 									Listeners: []*armcomputefleet.WinRMListener{
	// 										{
	// 											CertificateURL: to.Ptr("phwesineizrl"),
	// 											Protocol: to.Ptr(armcomputefleet.ProtocolTypesHTTP),
	// 									}},
	// 								},
	// 							},
	// 						},
	// 						ScheduledEventsProfile: &armcomputefleet.ScheduledEventsProfile{
	// 							OSImageNotificationProfile: &armcomputefleet.OSImageNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("olbpadmevekyczfokodtfprxti"),
	// 							},
	// 							TerminateNotificationProfile: &armcomputefleet.TerminateNotificationProfile{
	// 								Enable: to.Ptr(true),
	// 								NotBeforeTimeout: to.Ptr("iljppmmw"),
	// 							},
	// 						},
	// 						SecurityPostureReference: &armcomputefleet.SecurityPostureReference{
	// 							ExcludeExtensions: []*armcomputefleet.VirtualMachineExtension{
	// 								{
	// 									Name: to.Ptr("zudiuxzkgqhxaam"),
	// 									Type: to.Ptr("lpnynhnniohtotmkznxku"),
	// 									ID: to.Ptr("ovmtxndtfwvcxnw"),
	// 									Location: to.Ptr("wrqxhbqaebwkzmcdmngyqmhogc"),
	// 									Tags: map[string]*string{
	// 									},
	// 									Properties: &armcomputefleet.VirtualMachineExtensionProperties{
	// 										Type: to.Ptr("vhrtgbaqdkbrrqxsdiiaqxksmqukl"),
	// 										AutoUpgradeMinorVersion: to.Ptr(true),
	// 										EnableAutomaticUpgrade: to.Ptr(true),
	// 										ForceUpdateTag: to.Ptr("oriasdwawveilgusfrn"),
	// 										InstanceView: &armcomputefleet.VirtualMachineExtensionInstanceView{
	// 											Name: to.Ptr("ip"),
	// 											Type: to.Ptr("woadxvobquacooaujyg"),
	// 											Statuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											Substatuses: []*armcomputefleet.InstanceViewStatus{
	// 												{
	// 													Code: to.Ptr("kuehuahsdozupmjrtp"),
	// 													DisplayStatus: to.Ptr("pomenhgqjoelbxvsqwxxexqxv"),
	// 													Level: to.Ptr(armcomputefleet.StatusLevelTypesInfo),
	// 													Message: to.Ptr("jxjjmlwbjylzvrislyyflhnmizhiu"),
	// 													Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.042Z"); return t}()),
	// 											}},
	// 											TypeHandlerVersion: to.Ptr("ftkkqxdqiofgsusvxekdcpua"),
	// 										},
	// 										ProtectedSettings: map[string]any{
	// 										},
	// 										ProtectedSettingsFromKeyVault: &armcomputefleet.KeyVaultSecretReference{
	// 											SecretURL: to.Ptr("vyhzfkqsqanacgzjthpjoe"),
	// 											SourceVault: &armcomputefleet.SubResource{
	// 												ID: to.Ptr("groxwd"),
	// 											},
	// 										},
	// 										ProvisionAfterExtensions: []*string{
	// 											to.Ptr("lwsfavklrgzuwmyxscskt")},
	// 											ProvisioningState: to.Ptr("Succeeded"),
	// 											Publisher: to.Ptr("rxoajzb"),
	// 											Settings: map[string]any{
	// 											},
	// 											SuppressFailures: to.Ptr(true),
	// 											TypeHandlerVersion: to.Ptr("bvzbiibps"),
	// 										},
	// 								}},
	// 								ID: to.Ptr("mubredelfbshboaxrsxiajihahaa"),
	// 							},
	// 							SecurityProfile: &armcomputefleet.SecurityProfile{
	// 								EncryptionAtHost: to.Ptr(true),
	// 								EncryptionIdentity: &armcomputefleet.EncryptionIdentity{
	// 									UserAssignedIdentityResourceID: to.Ptr("qoersmt"),
	// 								},
	// 								ProxyAgentSettings: &armcomputefleet.ProxyAgentSettings{
	// 									Enabled: to.Ptr(true),
	// 									KeyIncarnationID: to.Ptr[int32](20),
	// 									Mode: to.Ptr(armcomputefleet.ModeAudit),
	// 								},
	// 								SecurityType: to.Ptr(armcomputefleet.SecurityTypesTrustedLaunch),
	// 								UefiSettings: &armcomputefleet.UefiSettings{
	// 									SecureBootEnabled: to.Ptr(true),
	// 									VTpmEnabled: to.Ptr(true),
	// 								},
	// 							},
	// 							ServiceArtifactReference: &armcomputefleet.ServiceArtifactReference{
	// 								ID: to.Ptr("qlkeeyskyr"),
	// 							},
	// 							StorageProfile: &armcomputefleet.VirtualMachineScaleSetStorageProfile{
	// 								DataDisks: []*armcomputefleet.VirtualMachineScaleSetDataDisk{
	// 									{
	// 										Name: to.Ptr("eogiykmdmeikswxmigjws"),
	// 										Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 										CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 										DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 										DiskIOPSReadWrite: to.Ptr[int64](27),
	// 										DiskMBpsReadWrite: to.Ptr[int64](2),
	// 										DiskSizeGB: to.Ptr[int32](6),
	// 										Lun: to.Ptr[int32](14),
	// 										ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 												DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 													ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 												},
	// 												SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 											},
	// 											StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 										},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 								}},
	// 								DiskControllerType: to.Ptr("uzb"),
	// 								ImageReference: &armcomputefleet.ImageReference{
	// 									ID: to.Ptr("aiunknwgksu"),
	// 									CommunityGalleryImageID: to.Ptr("vlqe"),
	// 									ExactVersion: to.Ptr("zjbntmiskjexlr"),
	// 									Offer: to.Ptr("isxgumkarlkomp"),
	// 									Publisher: to.Ptr("mqxgwbiyjzmxavhbkd"),
	// 									SharedGalleryImageID: to.Ptr("kmkgihoxwlawuuhcinfirktdwkmx"),
	// 									SKU: to.Ptr("eojmppqcrnpmxirtp"),
	// 									Version: to.Ptr("wvpcqefgtmqdgltiuz"),
	// 								},
	// 								OSDisk: &armcomputefleet.VirtualMachineScaleSetOSDisk{
	// 									Name: to.Ptr("wfttw"),
	// 									Caching: to.Ptr(armcomputefleet.CachingTypesNone),
	// 									CreateOption: to.Ptr(armcomputefleet.DiskCreateOptionTypesFromImage),
	// 									DeleteOption: to.Ptr(armcomputefleet.DiskDeleteOptionTypesDelete),
	// 									DiffDiskSettings: &armcomputefleet.DiffDiskSettings{
	// 										Option: to.Ptr(armcomputefleet.DiffDiskOptionsLocal),
	// 										Placement: to.Ptr(armcomputefleet.DiffDiskPlacementCacheDisk),
	// 									},
	// 									DiskSizeGB: to.Ptr[int32](14),
	// 									Image: &armcomputefleet.VirtualHardDisk{
	// 										URI: to.Ptr("thqceubivdrjs"),
	// 									},
	// 									ManagedDisk: &armcomputefleet.VirtualMachineScaleSetManagedDiskParameters{
	// 										DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 											ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 										},
	// 										SecurityProfile: &armcomputefleet.VMDiskSecurityProfile{
	// 											DiskEncryptionSet: &armcomputefleet.DiskEncryptionSetParameters{
	// 												ID: to.Ptr("vmatqblzjalbatdepyzqmnd"),
	// 											},
	// 											SecurityEncryptionType: to.Ptr(armcomputefleet.SecurityEncryptionTypesVMGuestStateOnly),
	// 										},
	// 										StorageAccountType: to.Ptr(armcomputefleet.StorageAccountTypesStandardLRS),
	// 									},
	// 									OSType: to.Ptr(armcomputefleet.OperatingSystemTypesWindows),
	// 									VhdContainers: []*string{
	// 										to.Ptr("tkzcwddtinkfpnfklatw")},
	// 										WriteAcceleratorEnabled: to.Ptr(true),
	// 									},
	// 								},
	// 								TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-29T21:51:44.043Z"); return t}()),
	// 								UserData: to.Ptr("s"),
	// 							},
	// 							ComputeAPIVersion: to.Ptr("2023-07-01"),
	// 							PlatformFaultDomainCount: to.Ptr[int32](1),
	// 						},
	// 						ProvisioningState: to.Ptr(armcomputefleet.ProvisioningStateSucceeded),
	// 						RegularPriorityProfile: &armcomputefleet.RegularPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.RegularPriorityAllocationStrategyLowestPrice),
	// 							Capacity: to.Ptr[int32](20),
	// 							MinCapacity: to.Ptr[int32](10),
	// 						},
	// 						SpotPriorityProfile: &armcomputefleet.SpotPriorityProfile{
	// 							AllocationStrategy: to.Ptr(armcomputefleet.SpotAllocationStrategyPriceCapacityOptimized),
	// 							Capacity: to.Ptr[int32](20),
	// 							EvictionPolicy: to.Ptr(armcomputefleet.EvictionPolicyDelete),
	// 							Maintain: to.Ptr(true),
	// 							MaxPricePerVM: to.Ptr[float32](0.00865),
	// 							MinCapacity: to.Ptr[int32](10),
	// 						},
	// 						VMSizesProfile: []*armcomputefleet.VMSizeProfile{
	// 							{
	// 								Name: to.Ptr("Standard_d1_v2"),
	// 								Rank: to.Ptr[int32](19225),
	// 						}},
	// 					},
	// 					Zones: []*string{
	// 						to.Ptr("zone1"),
	// 						to.Ptr("zone2")},
	// 					}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Delete.json
func ExampleFleetsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewFleetsClient().BeginDelete(ctx, "rgazurefleet", "testFleet", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListVirtualMachineScaleSets.json
func ExampleFleetsClient_NewListVirtualMachineScaleSetsPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcomputefleet.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewFleetsClient().NewListVirtualMachineScaleSetsPager("rgazurefleet", "myFleet", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.VirtualMachineScaleSetListResult = armcomputefleet.VirtualMachineScaleSetListResult{
		// 	Value: []*armcomputefleet.VirtualMachineScaleSet{
		// 		{
		// 			Name: to.Ptr("myVmss"),
		// 			Type: to.Ptr("Microsoft.AzureFleet/fleets/virtualMachineScaleSets"),
		// 			Error: &armcomputefleet.APIError{
		// 				Code: to.Ptr("OverconstrainedAllocationRequest"),
		// 				Innererror: &armcomputefleet.InnerError{
		// 					Errordetail: to.Ptr("ihjwbwykq"),
		// 					Exceptiontype: to.Ptr("sfaomfpoaptnbxchrfskm"),
		// 				},
		// 				Message: to.Ptr("Allocation Failed"),
		// 				Target: to.Ptr("nhaj"),
		// 				Details: []*armcomputefleet.APIErrorBase{
		// 					{
		// 						Code: to.Ptr("gzhtOverconstrainedAllocationRequestyosk"),
		// 						Message: to.Ptr("Allocation Failed"),
		// 						Target: to.Ptr("qfthabhrmndhfizfnrwpgxvnokpy"),
		// 				}},
		// 			},
		// 			ID: to.Ptr("/subscriptions/7B0CD4DB-3381-4013-9B31-FB6E6FD0FF1C/resourceGroups/rgazurefleet/providers/Microsoft.AzureFleet/fleets/myFleet/virtualMachineScaleSets/myVmss"),
		// 			OperationStatus: to.Ptr(armcomputefleet.ProvisioningStateCreating),
		// 	}},
		// }
	}
}
